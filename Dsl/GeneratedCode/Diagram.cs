//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "consist.RapidEntity.ClassDiagram")]

namespace consist.RapidEntity
{
	/// <summary>
	/// DomainClass ClassDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ClassDiagram.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ClassDiagram.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d9fd7045-072a-4acf-bb8b-58168a4da914")]
	public partial class ClassDiagram : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::consist.RapidEntity.RapidEntityToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Compartment support
		/// <summary>
		/// Whether compartment items change events are subscribed to.
		/// </summary>
		private bool subscribedCompartmentItemsEvents;
		
		/// <summary>
		/// Subscribe to events fired when compartment items changes.
		/// </summary>
		public void SubscribeCompartmentItemsEvents()
		{
			if (!subscribedCompartmentItemsEvents && this.Store != null)
			{
				subscribedCompartmentItemsEvents = true;
				this.Store.EventManagerDirectory.ElementAdded.Add(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Add(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Add(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
			}
		}
		
		/// <summary>
		/// Unsubscribe to events fired when compartment items changes.
		/// </summary>
		public void UnsubscribeCompartmentItemsEvents()
		{
			if (subscribedCompartmentItemsEvents)
			{
				this.Store.EventManagerDirectory.ElementAdded.Remove(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Remove(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Remove(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
				subscribedCompartmentItemsEvents = false;
			}
		}
		
		#region Event handlers
		/// <summary>
		/// Event for element added.
		/// </summary>
		private void CompartmentItemAdded(object sender, DslModeling::ElementAddedEventArgs e)
		{
			CompartmentItemAddRule.ElementAdded(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for element deleted.
		/// </summary>
		private void CompartmentItemDeleted(object sender, DslModeling::ElementDeletedEventArgs e)
		{
			CompartmentItemDeleteRule.ElementDeleted(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for element property changed.
		/// </summary>
		private void CompartmentItemPropertyChanged(object sender, DslModeling::ElementPropertyChangedEventArgs e)
		{
			CompartmentItemChangeRule.ElementPropertyChanged(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for role-player changed.
		/// </summary>
		private void CompartmentItemRolePlayerChanged(object sender, DslModeling::RolePlayerChangedEventArgs e)
		{
			CompartmentItemRolePlayerChangeRule.RolePlayerChanged(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for role-player order changed.
		/// </summary>
		private void CompartmentItemRolePlayerOrderChanged(object sender, DslModeling::RolePlayerOrderChangedEventArgs e)
		{
			CompartmentItemRolePlayerPositionChangeRule.RolePlayerPositionChanged(e, true /* repaint only */);
		}
		#endregion
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Most connectors are mapped to element links, but there can be exceptions. This method tell if a connector should be
		/// mapped to an element link.
		/// </summary>
		public override bool IsConnectorMappedToLink(DslDiagrams::BinaryLinkShape connector)
		{
			#region Check Parameters
			global::System.Diagnostics.Debug.Assert(connector != null);
			if (connector == null)
				throw new global::System.ArgumentNullException("connector");
			#endregion
			if (connector.GetType() == typeof(global::consist.RapidEntity.RelationshipConnector))
				return false;
			return base.IsConnectorMappedToLink(connector);
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::consist.RapidEntity.ModelClass)
			{
				global::consist.RapidEntity.ClassShape newShape = new global::consist.RapidEntity.ClassShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::consist.RapidEntity.OneToMany)
			{
				global::consist.RapidEntity.AggregationConnector newShape = new global::consist.RapidEntity.AggregationConnector(this.Partition);
				return newShape;
			}
			if(element is global::consist.RapidEntity.ManyToMany)
			{
				global::consist.RapidEntity.ManyToManyConnector newShape = new global::consist.RapidEntity.ManyToManyConnector(this.Partition);
				return newShape;
			}
			if(element is global::consist.RapidEntity.OneToOne)
			{
				global::consist.RapidEntity.BidirectionalConnector newShape = new global::consist.RapidEntity.BidirectionalConnector(this.Partition);
				return newShape;
			}
			if(element is global::consist.RapidEntity.Generalization)
			{
				global::consist.RapidEntity.GeneralizationConnector newShape = new global::consist.RapidEntity.GeneralizationConnector(this.Partition);
				return newShape;
			}
			if(element is global::consist.RapidEntity.Comment)
			{
				global::consist.RapidEntity.CommentBoxShape newShape = new global::consist.RapidEntity.CommentBoxShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::consist.RapidEntity.CommentReferencesSubjects)
			{
				global::consist.RapidEntity.CommentConnector newShape = new global::consist.RapidEntity.CommentConnector(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::consist.RapidEntity.ClassShape.DecoratorsInitialized += ClassShapeDecoratorMap.OnDecoratorsInitialized;
			global::consist.RapidEntity.CommentBoxShape.DecoratorsInitialized += CommentBoxShapeDecoratorMap.OnDecoratorsInitialized;
			global::consist.RapidEntity.BidirectionalConnector.DecoratorsInitialized += BidirectionalConnectorDecoratorMap.OnDecoratorsInitialized;
			global::consist.RapidEntity.AggregationConnector.DecoratorsInitialized += AggregationConnectorDecoratorMap.OnDecoratorsInitialized;
			global::consist.RapidEntity.ManyToManyConnector.DecoratorsInitialized += ManyToManyConnectorDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ClassShape.
		/// </summary>
		internal static partial class ClassShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ClassShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::consist.RapidEntity.NamedElement.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CommentBoxShape.
		/// </summary>
		internal static partial class CommentBoxShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CommentBoxShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::consist.RapidEntity.Comment.TextDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Comment").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for RelationshipConnector.
		/// </summary>
		internal static partial class RelationshipConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for RelationshipConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for BidirectionalConnector.
		/// </summary>
		internal static partial class BidirectionalConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for BidirectionalConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				RelationshipConnectorDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::consist.RapidEntity.BaseRelationship.DefaultRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::consist.RapidEntity.BaseRelationship.DefaultRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::consist.RapidEntity.BaseRelationship.OneRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceRoleName").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::consist.RapidEntity.BaseRelationship.OneRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetRoleName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AggregationConnector.
		/// </summary>
		internal static partial class AggregationConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for AggregationConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				RelationshipConnectorDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::consist.RapidEntity.BaseRelationship.DefaultRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::consist.RapidEntity.BaseRelationship.DefaultRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetMultiplicity").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::consist.RapidEntity.BaseRelationship.OneRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceRoleName").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::consist.RapidEntity.BaseRelationship.ManyRoleNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetRoleName").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ManyToManyConnector.
		/// </summary>
		internal static partial class ManyToManyConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ManyToManyConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				RelationshipConnectorDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		#endregion
		
		#region Connect actions
		private bool changingMouseAction;
		private global::consist.RapidEntity.BidirectionalAssociationConnectAction bidirectionalAssociationConnectAction;
		private global::consist.RapidEntity.AggregationConnectAction aggregationConnectAction;
		private global::consist.RapidEntity.GeneralizationConnectAction generalizationConnectAction;
		private global::consist.RapidEntity.CommentsReferenceTypesConnectAction commentsReferenceTypesConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::consist.RapidEntity.RapidEntityToolboxHelper.BidirectionalAssociationFilterString))
				{
					if (this.bidirectionalAssociationConnectAction == null)
					{
						this.bidirectionalAssociationConnectAction = new global::consist.RapidEntity.BidirectionalAssociationConnectAction(this);
						this.bidirectionalAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.bidirectionalAssociationConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::consist.RapidEntity.RapidEntityToolboxHelper.AggregationFilterString))
				{
					if (this.aggregationConnectAction == null)
					{
						this.aggregationConnectAction = new global::consist.RapidEntity.AggregationConnectAction(this);
						this.aggregationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.aggregationConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::consist.RapidEntity.RapidEntityToolboxHelper.GeneralizationFilterString))
				{
					if (this.generalizationConnectAction == null)
					{
						this.generalizationConnectAction = new global::consist.RapidEntity.GeneralizationConnectAction(this);
						this.generalizationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.generalizationConnectAction;
				} 
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::consist.RapidEntity.RapidEntityToolboxHelper.CommentsReferenceTypesFilterString))
				{
					if (this.commentsReferenceTypesConnectAction == null)
					{
						this.commentsReferenceTypesConnectAction = new global::consist.RapidEntity.CommentsReferenceTypesConnectAction(this);
						this.commentsReferenceTypesConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnConnectActionDeactivated);
					}
					action = this.commentsReferenceTypesConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom connect action.
		/// </summary>
		private void OnConnectActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom connect action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.bidirectionalAssociationConnectAction != null)
					{
						this.bidirectionalAssociationConnectAction.Dispose();
						this.bidirectionalAssociationConnectAction = null;
					}
					if(this.aggregationConnectAction != null)
					{
						this.aggregationConnectAction.Dispose();
						this.aggregationConnectAction = null;
					}
					if(this.generalizationConnectAction != null)
					{
						this.generalizationConnectAction.Dispose();
						this.generalizationConnectAction = null;
					}
					if(this.commentsReferenceTypesConnectAction != null)
					{
						this.commentsReferenceTypesConnectAction.Dispose();
						this.commentsReferenceTypesConnectAction = null;
					}
					this.UnsubscribeCompartmentItemsEvents();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd9fd7045, 0x072a, 0x4acf, 0xbb, 0x8b, 0x58, 0x16, 0x8a, 0x4d, 0xa9, 0x14);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EncryptedConnection domain property code
		
		/// <summary>
		/// EncryptedConnection domain property Id.
		/// </summary>
		public static readonly global::System.Guid EncryptedConnectionDomainPropertyId = new global::System.Guid(0x13d97aa9, 0x5962, 0x43e4, 0xb4, 0x4a, 0xa9, 0x46, 0xa3, 0x01, 0x52, 0xdf);
		
		/// <summary>
		/// Storage for EncryptedConnection
		/// </summary>
		private global::System.String encryptedConnectionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EncryptedConnection domain property.
		/// Description for consist.RapidEntity.ClassDiagram.Encrypted Connection
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ClassDiagram/EncryptedConnection.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ClassDiagram/EncryptedConnection.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("13d97aa9-5962-43e4-b44a-a946a30152df")]
		public global::System.String EncryptedConnection
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return encryptedConnectionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EncryptedConnectionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassDiagram.EncryptedConnection domain property.
		/// </summary>
		internal sealed partial class EncryptedConnectionPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassDiagram, global::System.String>
		{
			private EncryptedConnectionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassDiagram.EncryptedConnection domain property value handler.
			/// </summary>
			public static readonly EncryptedConnectionPropertyHandler Instance = new EncryptedConnectionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassDiagram.EncryptedConnection domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EncryptedConnectionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassDiagram element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.encryptedConnectionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassDiagram element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.encryptedConnectionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConnectionString domain property code
		
		/// <summary>
		/// ConnectionString domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConnectionStringDomainPropertyId = new global::System.Guid(0x6cec6e9b, 0x0c98, 0x4501, 0xb0, 0xd7, 0xd3, 0x73, 0x93, 0x00, 0x12, 0xfd);
		
		/// <summary>
		/// Storage for ConnectionString
		/// </summary>
		private global::System.String connectionStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ConnectionString domain property.
		/// Description for consist.RapidEntity.ClassDiagram.Connection String
		/// </summary>
		[System.ComponentModel.Editor(typeof(consist.RapidEntity.Customizations.ClassDiagramPropertyEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("consist.RapidEntity.ClassDiagram/ConnectionString.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ClassDiagram/ConnectionString.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6cec6e9b-0c98-4501-b0d7-d373930012fd")]
		public global::System.String ConnectionString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return connectionStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConnectionStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassDiagram.ConnectionString domain property.
		/// </summary>
		internal sealed partial class ConnectionStringPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassDiagram, global::System.String>
		{
			private ConnectionStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassDiagram.ConnectionString domain property value handler.
			/// </summary>
			public static readonly ConnectionStringPropertyHandler Instance = new ConnectionStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassDiagram.ConnectionString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConnectionStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassDiagram element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.connectionStringPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassDiagram element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.connectionStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region NameSingularization domain property code
		
		/// <summary>
		/// NameSingularization domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameSingularizationDomainPropertyId = new global::System.Guid(0xb45afc55, 0x614f, 0x46fb, 0xb7, 0x91, 0xe7, 0xa7, 0x29, 0x75, 0xda, 0xbc);
		
		/// <summary>
		/// Storage for NameSingularization
		/// </summary>
		private global::System.Boolean nameSingularizationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of NameSingularization domain property.
		/// Description for consist.RapidEntity.ClassDiagram.Name Singularization
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ClassDiagram/NameSingularization.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ClassDiagram/NameSingularization.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b45afc55-614f-46fb-b791-e7a72975dabc")]
		public global::System.Boolean NameSingularization
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nameSingularizationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NameSingularizationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassDiagram.NameSingularization domain property.
		/// </summary>
		internal sealed partial class NameSingularizationPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassDiagram, global::System.Boolean>
		{
			private NameSingularizationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassDiagram.NameSingularization domain property value handler.
			/// </summary>
			public static readonly NameSingularizationPropertyHandler Instance = new NameSingularizationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassDiagram.NameSingularization domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameSingularizationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ClassDiagram element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nameSingularizationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassDiagram element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nameSingularizationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProviderGuid domain property code
		
		/// <summary>
		/// ProviderGuid domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProviderGuidDomainPropertyId = new global::System.Guid(0xcfd0d4d7, 0x5643, 0x46ad, 0xb5, 0x15, 0xf1, 0x16, 0x34, 0x14, 0x31, 0x88);
		
		/// <summary>
		/// Storage for ProviderGuid
		/// </summary>
		private global::System.Guid providerGuidPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ProviderGuid domain property.
		/// Description for consist.RapidEntity.ClassDiagram.Provider Guid
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ClassDiagram/ProviderGuid.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ClassDiagram/ProviderGuid.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cfd0d4d7-5643-46ad-b515-f11634143188")]
		public global::System.Guid ProviderGuid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return providerGuidPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProviderGuidPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassDiagram.ProviderGuid domain property.
		/// </summary>
		internal sealed partial class ProviderGuidPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassDiagram, global::System.Guid>
		{
			private ProviderGuidPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassDiagram.ProviderGuid domain property value handler.
			/// </summary>
			public static readonly ProviderGuidPropertyHandler Instance = new ProviderGuidPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassDiagram.ProviderGuid domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProviderGuidDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(ClassDiagram element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.providerGuidPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassDiagram element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.providerGuidPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RemovableTablePrefixes domain property code
		
		/// <summary>
		/// RemovableTablePrefixes domain property Id.
		/// </summary>
		public static readonly global::System.Guid RemovableTablePrefixesDomainPropertyId = new global::System.Guid(0x6da518f4, 0x4c59, 0x436f, 0x9e, 0x96, 0xe2, 0xd3, 0xb8, 0x0c, 0x54, 0x69);
		
		/// <summary>
		/// Storage for RemovableTablePrefixes
		/// </summary>
		private global::System.String removableTablePrefixesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RemovableTablePrefixes domain property.
		/// Description for consist.RapidEntity.ClassDiagram.Removable Table Prefixes
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ClassDiagram/RemovableTablePrefixes.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ClassDiagram/RemovableTablePrefixes.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6da518f4-4c59-436f-9e96-e2d3b80c5469")]
		public global::System.String RemovableTablePrefixes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return removableTablePrefixesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RemovableTablePrefixesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassDiagram.RemovableTablePrefixes domain property.
		/// </summary>
		internal sealed partial class RemovableTablePrefixesPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassDiagram, global::System.String>
		{
			private RemovableTablePrefixesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassDiagram.RemovableTablePrefixes domain property value handler.
			/// </summary>
			public static readonly RemovableTablePrefixesPropertyHandler Instance = new RemovableTablePrefixesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassDiagram.RemovableTablePrefixes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RemovableTablePrefixesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassDiagram element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.removableTablePrefixesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassDiagram element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.removableTablePrefixesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region HasGrid domain property code
		
		/// <summary>
		/// HasGrid domain property Id.
		/// </summary>
		public static readonly global::System.Guid HasGridDomainPropertyId = new global::System.Guid(0xdc962417, 0x3b0b, 0x4522, 0xbd, 0x6b, 0x37, 0xf8, 0x28, 0xdd, 0x73, 0xe3);
		
		/// <summary>
		/// Storage for HasGrid
		/// </summary>
		private global::System.Boolean hasGridPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of HasGrid domain property.
		/// Description for consist.RapidEntity.ClassDiagram.Has Grid
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ClassDiagram/HasGrid.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ClassDiagram/HasGrid.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("dc962417-3b0b-4522-bd6b-37f828dd73e3")]
		public global::System.Boolean HasGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hasGridPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HasGridPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassDiagram.HasGrid domain property.
		/// </summary>
		internal sealed partial class HasGridPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassDiagram, global::System.Boolean>
		{
			private HasGridPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassDiagram.HasGrid domain property value handler.
			/// </summary>
			public static readonly HasGridPropertyHandler Instance = new HasGridPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassDiagram.HasGrid domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HasGridDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ClassDiagram element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hasGridPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassDiagram element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hasGridPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace consist.RapidEntity
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ModelClass), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.OneToOne), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ManyToMany), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.OneToMany), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.CommentReferencesSubjects), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.Comment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.Generalization), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::consist.RapidEntity.ModelClass)
				{
					parentElement = GetParentForModelClass((global::consist.RapidEntity.ModelClass)childElement);
				} else
				if(childElement is global::consist.RapidEntity.Comment)
				{
					parentElement = GetParentForComment((global::consist.RapidEntity.Comment)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::consist.RapidEntity.ModelRoot GetParentForModelClass( global::consist.RapidEntity.ModelType root )
			{
				// Segments 0 and 1
				global::consist.RapidEntity.ModelRoot result = root.ModelRoot;
				if ( result == null ) return null;
				return result;
			}
			public static global::consist.RapidEntity.ModelRoot GetParentForComment( global::consist.RapidEntity.Comment root )
			{
				// Segments 0 and 1
				global::consist.RapidEntity.ModelRoot result = root.ModelRoot;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
		/// <summary>
		/// Rule to update compartments when an item is added to the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ClassHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ClassHasPersistentKeys), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemAddRule : DslModeling::AddRule
		{
			/// <summary>
			/// Called when an element is added. 
			/// </summary>
			/// <param name="e"></param>
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				ElementAdded(e, false);
			}
	
			internal static void ElementAdded(DslModeling::ElementAddedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if (e.ModelElement.IsDeleted)
					return;
				if(e.ModelElement is global::consist.RapidEntity.ClassHasFields)
				{
					global::System.Collections.IEnumerable elements = GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::consist.RapidEntity.ClassHasFields)e.ModelElement);
					UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "AttributesCompartment", repaintOnly);
				}
				if(e.ModelElement is global::consist.RapidEntity.ClassHasPersistentKeys)
				{
					global::System.Collections.IEnumerable elements = GetModelClassForClassShapeKeysCompartmentFromLastLink((global::consist.RapidEntity.ClassHasPersistentKeys)e.ModelElement);
					UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "KeysCompartment", repaintOnly);
				}
			}
			
			#region static DomainPath traversal methods to get the list of compartments to update
			internal static global::System.Collections.ICollection GetModelClassForClassShapeAttributesCompartmentFromLastLink(global::consist.RapidEntity.ClassHasFields root)
			{
				// Segment 0
				global::consist.RapidEntity.ModelClass result = root.ModelClass;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetModelClassForClassShapeAttributesCompartment(global::consist.RapidEntity.Field root)
			{
				// Segments 1 and 0
				global::consist.RapidEntity.ModelClass result = root.ModelClass;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetModelClassForClassShapeKeysCompartmentFromLastLink(global::consist.RapidEntity.ClassHasPersistentKeys root)
			{
				// Segment 0
				global::consist.RapidEntity.ModelClass result = root.ModelClass;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetModelClassForClassShapeKeysCompartment(global::consist.RapidEntity.PersistentKey root)
			{
				// Segments 1 and 0
				global::consist.RapidEntity.ModelClass result = root.ModelClass;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			#endregion
	
			#region helper method to update compartments 
			/// <summary>
			/// Updates the compartments for the shapes associated to the given list of model elements
			/// </summary>
			/// <param name="elements">List of model elements</param>
			/// <param name="shapeType">The type of shape that needs updating</param>
			/// <param name="compartmentName">The name of the compartment to update</param>
			/// <param name="repaintOnly">If true, the method will only invalidate the shape for a repaint, without re-initializing the shape.</param>
			internal static void UpdateCompartments(global::System.Collections.IEnumerable elements, global::System.Type shapeType, string compartmentName, bool repaintOnly)
			{
				foreach (DslModeling::ModelElement element in elements)
				{
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
					foreach (DslDiagrams::PresentationElement pel in pels)
					{
						DslDiagrams::CompartmentShape compartmentShape = pel as DslDiagrams::CompartmentShape;
						if (compartmentShape != null && shapeType.IsAssignableFrom(compartmentShape.GetType()))
						{
							if (repaintOnly)
							{
								compartmentShape.Invalidate();
							}
							else
							{
								foreach(DslDiagrams::CompartmentMapping mapping in compartmentShape.GetCompartmentMappings())
								{
									if(mapping.CompartmentId==compartmentName)
									{
										mapping.InitializeCompartmentShape(compartmentShape);
										break;
									}
								}
							}
						}
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// Rule to update compartments when an items is removed from the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ClassHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ClassHasPersistentKeys), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemDeleteRule : DslModeling::DeleteRule
		{
			/// <summary>
			/// Called when an element is deleted
			/// </summary>
			/// <param name="e"></param>
			public override void ElementDeleted(DslModeling::ElementDeletedEventArgs e)
			{
				ElementDeleted(e, false);
			}
			
			internal static void ElementDeleted(DslModeling::ElementDeletedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::consist.RapidEntity.ClassHasFields)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::consist.RapidEntity.ClassHasFields)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "AttributesCompartment", repaintOnly);
				}
				if(e.ModelElement is global::consist.RapidEntity.ClassHasPersistentKeys)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelClassForClassShapeKeysCompartmentFromLastLink((global::consist.RapidEntity.ClassHasPersistentKeys)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "KeysCompartment", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when the property on an item being displayed changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.Field), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.PersistentKey), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemChangeRule : DslModeling::ChangeRule 
		{
			/// <summary>
			/// Called when an element is changed
			/// </summary>
			/// <param name="e"></param>
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				ElementPropertyChanged(e, false);
			}
			
			internal static void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::consist.RapidEntity.Field && e.DomainProperty.Id == global::consist.RapidEntity.Field.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartment((global::consist.RapidEntity.Field)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "AttributesCompartment", repaintOnly);
				}
				if(e.ModelElement is global::consist.RapidEntity.PersistentKey && e.DomainProperty.Id == global::consist.RapidEntity.PersistentKey.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeKeysCompartment((global::consist.RapidEntity.PersistentKey)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "KeysCompartment", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when a roleplayer change happens
		/// </summary>
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ClassHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ClassHasPersistentKeys), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerChangeRule : DslModeling::RolePlayerChangeRule 
		{
			/// <summary>
			/// Called when the roleplayer on a link changes.
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				RolePlayerChanged(e, false);
			}
			
			internal static void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::consist.RapidEntity.ClassHasFields).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::consist.RapidEntity.Field)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::consist.RapidEntity.ClassShape compartmentShape = pel as global::consist.RapidEntity.ClassShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::consist.RapidEntity.ClassHasFields)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "AttributesCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartment((global::consist.RapidEntity.Field)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "AttributesCompartment", repaintOnly);
					}
				}
				if(typeof(global::consist.RapidEntity.ClassHasPersistentKeys).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetModelClassForClassShapeKeysCompartmentFromLastLink((global::consist.RapidEntity.PersistentKey)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::consist.RapidEntity.ClassShape compartmentShape = pel as global::consist.RapidEntity.ClassShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[1].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeKeysCompartmentFromLastLink((global::consist.RapidEntity.ClassHasPersistentKeys)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "KeysCompartment", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeKeysCompartment((global::consist.RapidEntity.PersistentKey)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "KeysCompartment", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// Rule to update compartments when the order of items in the list changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ClassHasFields), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ClassHasPersistentKeys), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerPositionChangeRule : DslModeling::RolePlayerPositionChangeRule 
		{
			/// <summary>
			/// Called when the order of a roleplayer in a relationship changes
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e)
			{
				RolePlayerPositionChanged(e, false);
			}
			
			internal static void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::consist.RapidEntity.ClassHasFields).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartment((global::consist.RapidEntity.Field)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "AttributesCompartment", repaintOnly);
					}
				}
				if(typeof(global::consist.RapidEntity.ClassHasPersistentKeys).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeKeysCompartment((global::consist.RapidEntity.PersistentKey)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::consist.RapidEntity.ClassShape), "KeysCompartment", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.BaseRelationship), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::consist.RapidEntity.BaseRelationship.DefaultRoleNameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::consist.RapidEntity.AggregationConnector.FindAggregationConnectorDecorator("SourceMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::consist.RapidEntity.OneToMany.DomainClassId);
					}
					decorator = global::consist.RapidEntity.BidirectionalConnector.FindBidirectionalConnectorDecorator("SourceMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::consist.RapidEntity.OneToOne.DomainClassId);
					}
					decorator = global::consist.RapidEntity.AggregationConnector.FindAggregationConnectorDecorator("TargetMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::consist.RapidEntity.OneToMany.DomainClassId);
					}
					decorator = global::consist.RapidEntity.BidirectionalConnector.FindBidirectionalConnectorDecorator("TargetMultiplicity");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::consist.RapidEntity.OneToOne.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::consist.RapidEntity.BaseRelationship.OneRoleNameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::consist.RapidEntity.AggregationConnector.FindAggregationConnectorDecorator("SourceRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::consist.RapidEntity.OneToMany.DomainClassId);
					}
					decorator = global::consist.RapidEntity.BidirectionalConnector.FindBidirectionalConnectorDecorator("SourceRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::consist.RapidEntity.OneToOne.DomainClassId);
					}
					decorator = global::consist.RapidEntity.BidirectionalConnector.FindBidirectionalConnectorDecorator("TargetRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::consist.RapidEntity.OneToOne.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::consist.RapidEntity.BaseRelationship.ManyRoleNameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::consist.RapidEntity.AggregationConnector.FindAggregationConnectorDecorator("TargetRoleName");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::consist.RapidEntity.OneToMany.DomainClassId);
					}
				}
			}
		}
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.OneToMany), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.CommentReferencesSubjects), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.Generalization), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.ManyToMany), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::consist.RapidEntity.OneToOne), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::consist.RapidEntity.ClassDiagram diagram = linkShape.Diagram as global::consist.RapidEntity.ClassDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
