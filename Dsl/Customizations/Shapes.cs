using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
using System.Resources;
using Microsoft.VisualStudio.Modeling.Diagrams;

namespace consist.RapidEntity
{
    /// <summary>
    /// Please do not overwrite this changes with the ones generated by the Shapes.tt file.
    /// Instead, comment the changes in Shape.tt
    /// </summary>
    public partial class ClassShape : DslDiagrams::CompartmentShape
    {
        Microsoft.VisualStudio.Modeling.Diagrams.DisplayImageGetter displayImageGetter = new Microsoft.VisualStudio.Modeling.Diagrams.DisplayImageGetter(CompartmentImageProvider);
        Microsoft.VisualStudio.Modeling.Diagrams.DisplayImageGetter primaryKeyImageGetter = new Microsoft.VisualStudio.Modeling.Diagrams.DisplayImageGetter(CompartmentPrimaryKeyImageProvider);

        public static System.Drawing.Image CompartmentImageProvider(Microsoft.VisualStudio.Modeling.ModelElement element)
        {
            return (System.Drawing.Image)ImageHelper.GetImage(consist.RapidEntity.Properties.Resources.ResourceManager.GetObject("FieldIcon"));
        }

        public static System.Drawing.Image CompartmentPrimaryKeyImageProvider(Microsoft.VisualStudio.Modeling.ModelElement element)
        {
            return (System.Drawing.Image)ImageHelper.GetImage(consist.RapidEntity.Properties.Resources.ResourceManager.GetObject("PrimaryKey1"));
        }

        /// <summary>
        ///// Gets an array of CompartmentMappings for all compartments displayed on this shape
        ///// (including compartment maps defined on base shapes). 
        ///// </summary>
        ///// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
        ///// <returns></returns>
        protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
        {
            if (melType == null) throw new global::System.ArgumentNullException("melType");

            if (compartmentMappings == null)
            {
                // Initialize the table of compartment mappings if we haven't done so already. 
                // The table contains an array of CompartmentMapping for every Type that this
                // shape can be mapped to. 
                compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
                {
                    // First we get the mappings defined for the base shape, and add on any mappings defined for this
                    // shape. 
                    DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::consist.RapidEntity.ModelClass));
                    int localCompartmentMappingsOffset = 0;
                    if (baseMappings != null)
                    {
                        localCompartmentMappingsOffset = baseMappings.Length;
                    }
                    DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[2 + localCompartmentMappingsOffset];

                    if (baseMappings != null)
                    {
                        baseMappings.CopyTo(mappings, 0);
                    }
                    mappings[localCompartmentMappingsOffset + 0] = new DslDiagrams::ElementListCompartmentMapping(
                                                                                "AttributesCompartment",
                                                                                global::consist.RapidEntity.NamedElement.NameDomainPropertyId,
                                                                                global::consist.RapidEntity.Field.DomainClassId,
                                                                                GetElementsFromModelClassForAttributesCompartment,
                                                                                null,
                                                                                null,
                                                                                displayImageGetter);
                    mappings[localCompartmentMappingsOffset + 1] = new DslDiagrams::ElementListCompartmentMapping(
                                                                                "KeysCompartment",
                                                                                global::consist.RapidEntity.NamedElement.NameDomainPropertyId,
                                                                                global::consist.RapidEntity.PersistentKey.DomainClassId,
                                                                                GetElementsFromModelClassForKeysCompartment,
                                                                                null,
                                                                                null,
                                                                                primaryKeyImageGetter);
                    compartmentMappings.Add(typeof(global::consist.RapidEntity.ModelClass), mappings);
                }
            }

            // See if we can find the mapping being requested directly in the table. 
            DslDiagrams::CompartmentMapping[] returnValue;
            if (compartmentMappings.TryGetValue(melType, out returnValue))
            {
                return returnValue;
            }

            // If not, loop through the types in the table, and find the 'most derived' base
            // class of melType. 
            global::System.Type selectedMappedType = null;
            foreach (global::System.Type mappedType in compartmentMappings.Keys)
            {
                if (mappedType.IsAssignableFrom(melType) && (selectedMappedType == null || selectedMappedType.IsAssignableFrom(mappedType)))
                {
                    selectedMappedType = mappedType;
                }
            }
            if (selectedMappedType != null)
            {
                return compartmentMappings[selectedMappedType];
            }
            return new DslDiagrams::CompartmentMapping[] { };
        }        
    }
}
