//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainRelationship BaseRelationship
	/// Associations between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("c6734bd5-5807-498c-bb73-247a5a9aef54")]
	public abstract partial class BaseRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BaseRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc6734bd5, 0x5807, 0x498c, 0xbb, 0x73, 0x24, 0x7a, 0x5a, 0x9a, 0xef, 0x54);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected BaseRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x95b7a751, 0x7267, 0x464f, 0xab, 0x7a, 0x16, 0xeb, 0xe1, 0xbe, 0x70, 0xf7);
		
		/// <summary>
		/// DomainRole Source
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/Source.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/Source.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="consist.RapidEntity.BaseRelationship/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("95b7a751-7267-464f-ab7a-16ebe1be70f7")]
		public abstract ModelClass Source
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Sources of a ModelClass
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelClass> GetSources(ModelClass element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ModelClass>, ModelClass>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xc8119040, 0xe4a6, 0x4918, 0xb0, 0xef, 0x4b, 0xca, 0x12, 0xe3, 0xa2, 0x71);
		
		/// <summary>
		/// DomainRole Target
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/Target.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/Target.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="consist.RapidEntity.BaseRelationship/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c8119040-e4a6-4918-b0ef-4bca12e3a271")]
		public abstract ModelClass Target
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Targets of a ModelClass
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelClass> GetTargets(ModelClass element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ModelClass>, ModelClass>(element, SourceDomainRoleId);
		}
		#endregion
		#region SourceMultiplicity domain property code
		
		/// <summary>
		/// SourceMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceMultiplicityDomainPropertyId = new global::System.Guid(0xd76804d6, 0xb6a5, 0x495c, 0x80, 0xc3, 0x5d, 0x6a, 0xae, 0x0e, 0xac, 0x3a);
		
		/// <summary>
		/// Storage for SourceMultiplicity
		/// </summary>
		private Multiplicity sourceMultiplicityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SourceMultiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/SourceMultiplicity.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/SourceMultiplicity.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("d76804d6-b6a5-495c-80c3-5d6aae0eac3a")]
		public Multiplicity SourceMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.SourceMultiplicity domain property.
		/// </summary>
		internal sealed partial class SourceMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, Multiplicity>
		{
			private SourceMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.SourceMultiplicity domain property value handler.
			/// </summary>
			public static readonly SourceMultiplicityPropertyHandler Instance = new SourceMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.SourceMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceRoleName domain property code
		
		/// <summary>
		/// SourceRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceRoleNameDomainPropertyId = new global::System.Guid(0x7771bacf, 0x4e24, 0x4956, 0x8f, 0xc7, 0x1b, 0x93, 0x4d, 0x50, 0x8b, 0x16);
		
		/// <summary>
		/// Storage for SourceRoleName
		/// </summary>
		private global::System.String sourceRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/SourceRoleName.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/SourceRoleName.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("7771bacf-4e24-4956-8fc7-1b934d508b16")]
		public global::System.String SourceRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.SourceRoleName domain property.
		/// </summary>
		internal sealed partial class SourceRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, global::System.String>
		{
			private SourceRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.SourceRoleName domain property value handler.
			/// </summary>
			public static readonly SourceRoleNamePropertyHandler Instance = new SourceRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.SourceRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetMultiplicity domain property code
		
		/// <summary>
		/// TargetMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetMultiplicityDomainPropertyId = new global::System.Guid(0x064bdfd7, 0x040d, 0x4e55, 0xaf, 0x73, 0x03, 0x4d, 0xed, 0xdd, 0xb1, 0xe4);
		
		/// <summary>
		/// Storage for TargetMultiplicity
		/// </summary>
		private Multiplicity targetMultiplicityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TargetMultiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/TargetMultiplicity.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/TargetMultiplicity.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("064bdfd7-040d-4e55-af73-034dedddb1e4")]
		public Multiplicity TargetMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.TargetMultiplicity domain property.
		/// </summary>
		internal sealed partial class TargetMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, Multiplicity>
		{
			private TargetMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.TargetMultiplicity domain property value handler.
			/// </summary>
			public static readonly TargetMultiplicityPropertyHandler Instance = new TargetMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.TargetMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetRoleName domain property code
		
		/// <summary>
		/// TargetRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleNameDomainPropertyId = new global::System.Guid(0xf00db165, 0x4aa9, 0x4597, 0xa0, 0x58, 0x71, 0xc7, 0xe9, 0x72, 0xe4, 0xbb);
		
		/// <summary>
		/// Storage for TargetRoleName
		/// </summary>
		private global::System.String targetRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/TargetRoleName.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/TargetRoleName.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("f00db165-4aa9-4597-a058-71c7e972e4bb")]
		public global::System.String TargetRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.TargetRoleName domain property.
		/// </summary>
		internal sealed partial class TargetRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, global::System.String>
		{
			private TargetRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.TargetRoleName domain property value handler.
			/// </summary>
			public static readonly TargetRoleNamePropertyHandler Instance = new TargetRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.TargetRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferenceColumn domain property code
		
		/// <summary>
		/// ReferenceColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceColumnDomainPropertyId = new global::System.Guid(0x21549dfc, 0x9b0b, 0x4c53, 0xad, 0xee, 0x24, 0xa4, 0xf6, 0x67, 0x41, 0x43);
		
		/// <summary>
		/// Storage for ReferenceColumn
		/// </summary>
		private global::System.String referenceColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReferenceColumn domain property.
		/// Description for consist.RapidEntity.BaseRelationship.Reference Column
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/ReferenceColumn.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/ReferenceColumn.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("21549dfc-9b0b-4c53-adee-24a4f6674143")]
		public global::System.String ReferenceColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return referenceColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.ReferenceColumn domain property.
		/// </summary>
		internal sealed partial class ReferenceColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, global::System.String>
		{
			private ReferenceColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.ReferenceColumn domain property value handler.
			/// </summary>
			public static readonly ReferenceColumnPropertyHandler Instance = new ReferenceColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.ReferenceColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.referenceColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.referenceColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferenceEntity domain property code
		
		/// <summary>
		/// ReferenceEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceEntityDomainPropertyId = new global::System.Guid(0xd2335f91, 0x1957, 0x4e27, 0xad, 0x47, 0x82, 0x96, 0xef, 0x65, 0x0e, 0x2c);
		
		/// <summary>
		/// Storage for ReferenceEntity
		/// </summary>
		private global::System.String referenceEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReferenceEntity domain property.
		/// Description for consist.RapidEntity.BaseRelationship.Reference Entity
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/ReferenceEntity.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/ReferenceEntity.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d2335f91-1957-4e27-ad47-8296ef650e2c")]
		public global::System.String ReferenceEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return referenceEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferenceEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.ReferenceEntity domain property.
		/// </summary>
		internal sealed partial class ReferenceEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, global::System.String>
		{
			private ReferenceEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.ReferenceEntity domain property value handler.
			/// </summary>
			public static readonly ReferenceEntityPropertyHandler Instance = new ReferenceEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.ReferenceEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferenceEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.referenceEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.referenceEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OwnerEntity domain property code
		
		/// <summary>
		/// OwnerEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid OwnerEntityDomainPropertyId = new global::System.Guid(0xf468efe5, 0x65b7, 0x467b, 0xad, 0x0f, 0xe0, 0x65, 0xd8, 0x52, 0x58, 0xe2);
		
		/// <summary>
		/// Storage for OwnerEntity
		/// </summary>
		private global::System.String ownerEntityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OwnerEntity domain property.
		/// Description for consist.RapidEntity.BaseRelationship.Owner Entity
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/OwnerEntity.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/OwnerEntity.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f468efe5-65b7-467b-ad0f-e065d85258e2")]
		public global::System.String OwnerEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ownerEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OwnerEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.OwnerEntity domain property.
		/// </summary>
		internal sealed partial class OwnerEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, global::System.String>
		{
			private OwnerEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.OwnerEntity domain property value handler.
			/// </summary>
			public static readonly OwnerEntityPropertyHandler Instance = new OwnerEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.OwnerEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OwnerEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ownerEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.ownerEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefaultRoleName domain property code
		
		/// <summary>
		/// DefaultRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultRoleNameDomainPropertyId = new global::System.Guid(0x06d5da4a, 0xca39, 0x4f8c, 0x9f, 0x03, 0xa0, 0x00, 0xdb, 0x42, 0x45, 0xbe);
		
		/// <summary>
		/// Storage for DefaultRoleName
		/// </summary>
		private global::System.String defaultRoleNamePropertyStorage = "    ";
		
		/// <summary>
		/// Gets or sets the value of DefaultRoleName domain property.
		/// Description for consist.RapidEntity.BaseRelationship.Default Role Name
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/DefaultRoleName.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/DefaultRoleName.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("    ")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("06d5da4a-ca39-4f8c-9f03-a000db4245be")]
		public global::System.String DefaultRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.DefaultRoleName domain property.
		/// </summary>
		internal sealed partial class DefaultRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, global::System.String>
		{
			private DefaultRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.DefaultRoleName domain property value handler.
			/// </summary>
			public static readonly DefaultRoleNamePropertyHandler Instance = new DefaultRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.DefaultRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ManyRoleName domain property code
		
		/// <summary>
		/// ManyRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ManyRoleNameDomainPropertyId = new global::System.Guid(0x974bcf39, 0x5cb4, 0x45da, 0xb4, 0x8d, 0x90, 0x07, 0x7f, 0x11, 0x8a, 0xdb);
		
		/// <summary>
		/// Storage for ManyRoleName
		/// </summary>
		private global::System.String manyRoleNamePropertyStorage = "0..*";
		
		/// <summary>
		/// Gets or sets the value of ManyRoleName domain property.
		/// Description for consist.RapidEntity.BaseRelationship.Many Role Name
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/ManyRoleName.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/ManyRoleName.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("0..*")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("974bcf39-5cb4-45da-b48d-90077f118adb")]
		public global::System.String ManyRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return manyRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ManyRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.ManyRoleName domain property.
		/// </summary>
		internal sealed partial class ManyRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, global::System.String>
		{
			private ManyRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.ManyRoleName domain property value handler.
			/// </summary>
			public static readonly ManyRoleNamePropertyHandler Instance = new ManyRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.ManyRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ManyRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.manyRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.manyRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OneRoleName domain property code
		
		/// <summary>
		/// OneRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid OneRoleNameDomainPropertyId = new global::System.Guid(0x658077c3, 0xb30a, 0x48b6, 0x8b, 0x25, 0x5a, 0x63, 0xcf, 0xf6, 0x5a, 0x61);
		
		/// <summary>
		/// Storage for OneRoleName
		/// </summary>
		private global::System.String oneRoleNamePropertyStorage = "1";
		
		/// <summary>
		/// Gets or sets the value of OneRoleName domain property.
		/// Description for consist.RapidEntity.BaseRelationship.One Role Name
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/OneRoleName.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/OneRoleName.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("1")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("658077c3-b30a-48b6-8b25-5a63cff65a61")]
		public global::System.String OneRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return oneRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OneRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.OneRoleName domain property.
		/// </summary>
		internal sealed partial class OneRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, global::System.String>
		{
			private OneRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.OneRoleName domain property value handler.
			/// </summary>
			public static readonly OneRoleNamePropertyHandler Instance = new OneRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.OneRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OneRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.oneRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.oneRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReferencedKey domain property code
		
		/// <summary>
		/// ReferencedKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReferencedKeyDomainPropertyId = new global::System.Guid(0x2c64faf7, 0x0b9d, 0x4404, 0xbd, 0xd2, 0x6b, 0xa7, 0x92, 0x2f, 0x4b, 0x4a);
		
		/// <summary>
		/// Storage for ReferencedKey
		/// </summary>
		private global::System.String referencedKeyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ReferencedKey domain property.
		/// Description for consist.RapidEntity.BaseRelationship.Referenced Key
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/ReferencedKey.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/ReferencedKey.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2c64faf7-0b9d-4404-bdd2-6ba7922f4b4a")]
		public global::System.String ReferencedKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return referencedKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReferencedKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.ReferencedKey domain property.
		/// </summary>
		internal sealed partial class ReferencedKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, global::System.String>
		{
			private ReferencedKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.ReferencedKey domain property value handler.
			/// </summary>
			public static readonly ReferencedKeyPropertyHandler Instance = new ReferencedKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.ReferencedKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReferencedKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.referencedKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.referencedKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xe94b9dc5, 0x940d, 0x43c5, 0xb2, 0xac, 0xbc, 0xec, 0x38, 0xc3, 0x11, 0xe8);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for consist.RapidEntity.BaseRelationship.Type
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.BaseRelationship/Type.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.BaseRelationship/Type.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e94b9dc5-940d-43c5-b2ac-bcec38c311e8")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseRelationship.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<BaseRelationship, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseRelationship.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseRelationship.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseRelationship element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseRelationship element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of BaseRelationship links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.BaseRelationship> GetLinksToTargets ( global::consist.RapidEntity.ModelClass sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.BaseRelationship>(sourceInstance, global::consist.RapidEntity.BaseRelationship.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of BaseRelationship links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.BaseRelationship> GetLinksToSources ( global::consist.RapidEntity.ModelClass targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.BaseRelationship>(targetInstance, global::consist.RapidEntity.BaseRelationship.TargetDomainRoleId);
		}
		#endregion
		#region BaseRelationship instance accessors
		
		/// <summary>
		/// Get any BaseRelationship links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.BaseRelationship> GetLinks( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.ModelClass target )
		{
			global::System.Collections.Generic.List<global::consist.RapidEntity.BaseRelationship> outLinks = new global::System.Collections.Generic.List<global::consist.RapidEntity.BaseRelationship>();
			global::System.Collections.Generic.IList<global::consist.RapidEntity.BaseRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.BaseRelationship>(source, global::consist.RapidEntity.BaseRelationship.SourceDomainRoleId);
			foreach ( global::consist.RapidEntity.BaseRelationship link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainRelationship ClassHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ClassHasFields.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ClassHasFields.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ca4a177d-99f5-4932-bcb7-8f7cf3ca05a0")]
	public partial class ClassHasFields : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xca4a177d, 0x99f5, 0x4932, 0xbc, 0xb7, 0x8f, 0x7c, 0xf3, 0xca, 0x05, 0xa0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasFields link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">Field to use as the target of the relationship.</param>
		public ClassHasFields(ModelClass source, Field target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasFields.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasFields.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x1dcdf90c, 0x3a20, 0x420f, 0xb5, 0x7d, 0x68, 0x62, 0x60, 0x57, 0xe5, 0x30);
		
		/// <summary>
		/// DomainRole ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ClassHasFields/ModelClass.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ClassHasFields/ModelClass.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="consist.RapidEntity.ClassHasFields/ModelClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1dcdf90c-3a20-420f-b57d-68626057e530")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a Field
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(Field element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(Field element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newModelClass);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0x7cb320fd, 0x2d6f, 0x40dd, 0xa8, 0xd6, 0xd3, 0x5a, 0xed, 0x78, 0x48, 0x5f);
		
		/// <summary>
		/// DomainRole Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ClassHasFields/Attribute.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ClassHasFields/Attribute.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="consist.RapidEntity.ClassHasFields/Attribute.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("7cb320fd-2d6f-40dd-a8d6-d35aed78485f")]
		public virtual Field Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Field)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a ModelClass
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Field> GetFields(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasFields links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ClassHasFields> GetLinksToFields ( global::consist.RapidEntity.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ClassHasFields>(modelClassInstance, global::consist.RapidEntity.ClassHasFields.ModelClassDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the ClassHasFields link to a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.ClassHasFields GetLinkToModelClass (global::consist.RapidEntity.Field attributeInstance)
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ClassHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ClassHasFields>(attributeInstance, global::consist.RapidEntity.ClassHasFields.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasFields instance accessors
		
		/// <summary>
		/// Get any ClassHasFields links between a given ModelClass and a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ClassHasFields> GetLinks( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.Field target )
		{
			global::System.Collections.Generic.List<global::consist.RapidEntity.ClassHasFields> outLinks = new global::System.Collections.Generic.List<global::consist.RapidEntity.ClassHasFields>();
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ClassHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ClassHasFields>(source, global::consist.RapidEntity.ClassHasFields.ModelClassDomainRoleId);
			foreach ( global::consist.RapidEntity.ClassHasFields link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasFields link between a given ModelClassand a Field.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.ClassHasFields GetLink( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.Field target )
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ClassHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ClassHasFields>(source, global::consist.RapidEntity.ClassHasFields.ModelClassDomainRoleId);
			foreach ( global::consist.RapidEntity.ClassHasFields link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainRelationship ModelRootHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ModelRootHasComments.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ModelRootHasComments.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c5135fd4-4169-4ab8-8c02-3b30da4388a4")]
	public partial class ModelRootHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5135fd4, 0x4169, 0x4ab8, 0x8c, 0x02, 0x3b, 0x30, 0xda, 0x43, 0x88, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComments link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelRootHasComments(ModelRoot source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComments.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x89e8d218, 0x725f, 0x4e00, 0x98, 0x59, 0xc8, 0x99, 0x95, 0xff, 0x90, 0x4a);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelRootHasComments/ModelRoot.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelRootHasComments/ModelRoot.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="consist.RapidEntity.ModelRootHasComments/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("89e8d218-725f-4e00-9859-c89995ff904a")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Comment
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Comment element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModelRoot);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xaf9f4e2d, 0x4c86, 0x4f84, 0x8f, 0x5b, 0xd4, 0x39, 0x98, 0x3c, 0xd3, 0xaa);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelRootHasComments/Comment.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelRootHasComments/Comment.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="consist.RapidEntity.ModelRootHasComments/Comment.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("af9f4e2d-4c86-4f84-8f5b-d439983cd3aa")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelRoot
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasComments links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ModelRootHasComments> GetLinksToComments ( global::consist.RapidEntity.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ModelRootHasComments>(modelRootInstance, global::consist.RapidEntity.ModelRootHasComments.ModelRootDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelRootHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.ModelRootHasComments GetLinkToModelRoot (global::consist.RapidEntity.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ModelRootHasComments>(commentInstance, global::consist.RapidEntity.ModelRootHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComments instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComments links between a given ModelRoot and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ModelRootHasComments> GetLinks( global::consist.RapidEntity.ModelRoot source, global::consist.RapidEntity.Comment target )
		{
			global::System.Collections.Generic.List<global::consist.RapidEntity.ModelRootHasComments> outLinks = new global::System.Collections.Generic.List<global::consist.RapidEntity.ModelRootHasComments>();
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ModelRootHasComments>(source, global::consist.RapidEntity.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::consist.RapidEntity.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComments link between a given ModelRootand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.ModelRootHasComments GetLink( global::consist.RapidEntity.ModelRoot source, global::consist.RapidEntity.Comment target )
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ModelRootHasComments>(source, global::consist.RapidEntity.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::consist.RapidEntity.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainRelationship Generalization
	/// Inheritance between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.Generalization.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.Generalization.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("a79105fb-4b47-4f22-b826-ea93592d1cd4")]
	public partial class Generalization : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Generalization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa79105fb, 0x4b47, 0x4f22, 0xb8, 0x26, 0xea, 0x93, 0x59, 0x2d, 0x1c, 0xd4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Generalization link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Generalization(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Generalization.SuperclassDomainRoleId, source), new DslModeling::RoleAssignment(Generalization.SubclassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Superclass domain role code
		
		/// <summary>
		/// Superclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperclassDomainRoleId = new global::System.Guid(0x17248147, 0xe7ab, 0x40c4, 0x8a, 0x20, 0xe9, 0x47, 0x97, 0xc0, 0xa9, 0x0a);
		
		/// <summary>
		/// DomainRole Superclass
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.Generalization/Superclass.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.Generalization/Superclass.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclasses", PropertyDisplayNameKey="consist.RapidEntity.Generalization/Superclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("17248147-e7ab-40c4-8a20-e94797c0a90a")]
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Superclass of a ModelClass
		/// <summary>
		/// Gets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetSuperclass(ModelClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubclassDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperclass(ModelClass element, ModelClass newSuperclass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubclassDomainRoleId, newSuperclass);
		}
		#endregion
		#region Subclass domain role code
		
		/// <summary>
		/// Subclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubclassDomainRoleId = new global::System.Guid(0x1ba399d5, 0x7b63, 0x42b7, 0xaa, 0x2d, 0x01, 0x44, 0x0b, 0xd8, 0x00, 0x40);
		
		/// <summary>
		/// DomainRole Subclass
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.Generalization/Subclass.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.Generalization/Subclass.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Superclass", PropertyDisplayNameKey="consist.RapidEntity.Generalization/Subclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1ba399d5-7b63-42b7-aa2d-01440bd80040")]
		public virtual ModelClass Subclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclasses of a ModelClass
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetSubclasses(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, SuperclassDomainRoleId);
		}
		#endregion
		#region Discriminator domain property code
		
		/// <summary>
		/// Discriminator domain property Id.
		/// </summary>
		public static readonly global::System.Guid DiscriminatorDomainPropertyId = new global::System.Guid(0x0b5c6234, 0x9803, 0x4394, 0x83, 0x82, 0x21, 0x7a, 0xe0, 0x16, 0xd0, 0xdc);
		
		/// <summary>
		/// Storage for Discriminator
		/// </summary>
		private global::System.String discriminatorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Discriminator domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.Generalization/Discriminator.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.Generalization/Discriminator.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("0b5c6234-9803-4394-8382-217ae016d0dc")]
		public global::System.String Discriminator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return discriminatorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DiscriminatorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Generalization.Discriminator domain property.
		/// </summary>
		internal sealed partial class DiscriminatorPropertyHandler : DslModeling::DomainPropertyValueHandler<Generalization, global::System.String>
		{
			private DiscriminatorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Generalization.Discriminator domain property value handler.
			/// </summary>
			public static readonly DiscriminatorPropertyHandler Instance = new DiscriminatorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Generalization.Discriminator domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DiscriminatorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Generalization element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.discriminatorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Generalization element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.discriminatorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Superclass link accessor
		/// <summary>
		/// Get the list of Generalization links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.Generalization> GetLinksToSubclasses ( global::consist.RapidEntity.ModelClass superclassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.Generalization>(superclassInstance, global::consist.RapidEntity.Generalization.SuperclassDomainRoleId);
		}
		#endregion
		#region Subclass link accessor
		/// <summary>
		/// Get the Generalization link to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.Generalization GetLinkToSuperclass (global::consist.RapidEntity.ModelClass subclassInstance)
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.Generalization>(subclassInstance, global::consist.RapidEntity.Generalization.SubclassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subclass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Generalization instance accessors
		
		/// <summary>
		/// Get any Generalization links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.Generalization> GetLinks( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.ModelClass target )
		{
			global::System.Collections.Generic.List<global::consist.RapidEntity.Generalization> outLinks = new global::System.Collections.Generic.List<global::consist.RapidEntity.Generalization>();
			global::System.Collections.Generic.IList<global::consist.RapidEntity.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.Generalization>(source, global::consist.RapidEntity.Generalization.SuperclassDomainRoleId);
			foreach ( global::consist.RapidEntity.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Generalization link between a given ModelClassand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.Generalization GetLink( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.Generalization>(source, global::consist.RapidEntity.Generalization.SuperclassDomainRoleId);
			foreach ( global::consist.RapidEntity.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainRelationship OneToOne
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.OneToOne.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.OneToOne.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("f52a2a14-3cec-4122-b124-1e58d5d10e0a")]
	public partial class OneToOne : BaseRelationship
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OneToOne domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf52a2a14, 0x3cec, 0x4122, 0xb1, 0x24, 0x1e, 0x58, 0xd5, 0xd1, 0x0e, 0x0a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OneToOne link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public OneToOne(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OneToOne.BidirectionalSourceDomainRoleId, source), new DslModeling::RoleAssignment(OneToOne.BidirectionalTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OneToOne(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OneToOne(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OneToOne(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OneToOne(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BidirectionalSource domain role code
		
		/// <summary>
		/// BidirectionalSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid BidirectionalSourceDomainRoleId = new global::System.Guid(0x80e9f254, 0xb85b, 0x453b, 0x89, 0xf4, 0x01, 0xb7, 0x5f, 0xb9, 0x1c, 0xa6);
		
		/// <summary>
		/// DomainRole BidirectionalSource
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.OneToOne/BidirectionalSource.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.OneToOne/BidirectionalSource.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OneToOneTargets", PropertyDisplayNameKey="consist.RapidEntity.OneToOne/BidirectionalSource.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("80e9f254-b85b-453b-89f4-01b75fb91ca6")]
		public virtual ModelClass BidirectionalSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BidirectionalSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BidirectionalSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OneToOneSources of a ModelClass
		/// <summary>
		/// Gets a list of OneToOneSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetOneToOneSources(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, BidirectionalTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing BidirectionalSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BidirectionalSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BidirectionalSource = value;
			}
		}
		
		#endregion
		#region BidirectionalTarget domain role code
		
		/// <summary>
		/// BidirectionalTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid BidirectionalTargetDomainRoleId = new global::System.Guid(0xab1a2013, 0x2931, 0x4015, 0xb9, 0x76, 0x72, 0xfd, 0x10, 0xfc, 0x5c, 0xd3);
		
		/// <summary>
		/// DomainRole BidirectionalTarget
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.OneToOne/BidirectionalTarget.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.OneToOne/BidirectionalTarget.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "OneToOneSources", PropertyDisplayNameKey="consist.RapidEntity.OneToOne/BidirectionalTarget.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ab1a2013-2931-4015-b976-72fd10fc5cd3")]
		public virtual ModelClass BidirectionalTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BidirectionalTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BidirectionalTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OneToOneTargets of a ModelClass
		/// <summary>
		/// Gets a list of OneToOneTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetOneToOneTargets(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, BidirectionalSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing BidirectionalTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BidirectionalTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BidirectionalTarget = value;
			}
		}
		
		#endregion
		#region RelationColumn domain property code
		
		/// <summary>
		/// RelationColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid RelationColumnDomainPropertyId = new global::System.Guid(0x33c11381, 0x0554, 0x4af2, 0xbf, 0xd6, 0xb1, 0x1d, 0x8c, 0x7e, 0x4b, 0xf7);
		
		/// <summary>
		/// Storage for RelationColumn
		/// </summary>
		private global::System.String relationColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RelationColumn domain property.
		/// Description for consist.RapidEntity.OneToOne.Relation Column
		/// </summary>
		[System.ComponentModel.Editor(typeof(consist.RapidEntity.Customizations.Relationship.RelationshipEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("consist.RapidEntity.OneToOne/RelationColumn.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.OneToOne/RelationColumn.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("33c11381-0554-4af2-bfd6-b11d8c7e4bf7")]
		public global::System.String RelationColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return relationColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RelationColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the OneToOne.RelationColumn domain property.
		/// </summary>
		internal sealed partial class RelationColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<OneToOne, global::System.String>
		{
			private RelationColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the OneToOne.RelationColumn domain property value handler.
			/// </summary>
			public static readonly RelationColumnPropertyHandler Instance = new RelationColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the OneToOne.RelationColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RelationColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(OneToOne element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.relationColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(OneToOne element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.relationColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Cascade domain property code
		
		/// <summary>
		/// Cascade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CascadeDomainPropertyId = new global::System.Guid(0x7e173564, 0x1e2a, 0x43ce, 0xad, 0x1d, 0x43, 0x37, 0xc6, 0xd2, 0x4b, 0x71);
		
		/// <summary>
		/// Storage for Cascade
		/// </summary>
		private global::System.String cascadePropertyStorage = "Cascade.NOTSET";
		
		/// <summary>
		/// Gets or sets the value of Cascade domain property.
		/// Description for consist.RapidEntity.OneToOne.Cascade
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.OneToOne/Cascade.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.OneToOne/Cascade.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Cascade.NOTSET")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("7e173564-1e2a-43ce-ad1d-4337c6d24b71")]
		public global::System.String Cascade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return cascadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CascadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the OneToOne.Cascade domain property.
		/// </summary>
		internal sealed partial class CascadePropertyHandler : DslModeling::DomainPropertyValueHandler<OneToOne, global::System.String>
		{
			private CascadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the OneToOne.Cascade domain property value handler.
			/// </summary>
			public static readonly CascadePropertyHandler Instance = new CascadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the OneToOne.Cascade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CascadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(OneToOne element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.cascadePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(OneToOne element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.cascadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsImported domain property code
		
		/// <summary>
		/// IsImported domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsImportedDomainPropertyId = new global::System.Guid(0x11daeab4, 0xfed9, 0x47f5, 0xaa, 0xd4, 0xef, 0x72, 0xe1, 0x6f, 0x99, 0x28);
		
		/// <summary>
		/// Storage for IsImported
		/// </summary>
		private global::System.Boolean isImportedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsImported domain property.
		/// Description for consist.RapidEntity.OneToOne.Is Imported
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.OneToOne/IsImported.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.OneToOne/IsImported.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("11daeab4-fed9-47f5-aad4-ef72e16f9928")]
		public global::System.Boolean IsImported
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isImportedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsImportedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the OneToOne.IsImported domain property.
		/// </summary>
		internal sealed partial class IsImportedPropertyHandler : DslModeling::DomainPropertyValueHandler<OneToOne, global::System.Boolean>
		{
			private IsImportedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the OneToOne.IsImported domain property value handler.
			/// </summary>
			public static readonly IsImportedPropertyHandler Instance = new IsImportedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the OneToOne.IsImported domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsImportedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(OneToOne element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isImportedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(OneToOne element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isImportedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BidirectionalSource link accessor
		/// <summary>
		/// Get the list of OneToOne links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.OneToOne> GetLinksToOneToOneTargets ( global::consist.RapidEntity.ModelClass bidirectionalSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.OneToOne>(bidirectionalSourceInstance, global::consist.RapidEntity.OneToOne.BidirectionalSourceDomainRoleId);
		}
		#endregion
		#region BidirectionalTarget link accessor
		/// <summary>
		/// Get the list of OneToOne links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.OneToOne> GetLinksToOneToOneSources ( global::consist.RapidEntity.ModelClass bidirectionalTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.OneToOne>(bidirectionalTargetInstance, global::consist.RapidEntity.OneToOne.BidirectionalTargetDomainRoleId);
		}
		#endregion
		#region OneToOne instance accessors
		
		/// <summary>
		/// Get any OneToOne links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.OneToOne> GetLinks( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.ModelClass target )
		{
			global::System.Collections.Generic.List<global::consist.RapidEntity.OneToOne> outLinks = new global::System.Collections.Generic.List<global::consist.RapidEntity.OneToOne>();
			global::System.Collections.Generic.IList<global::consist.RapidEntity.OneToOne> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.OneToOne>(source, global::consist.RapidEntity.OneToOne.BidirectionalSourceDomainRoleId);
			foreach ( global::consist.RapidEntity.OneToOne link in links )
			{
				if ( target.Equals(link.BidirectionalTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainRelationship OneToMany
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.OneToMany.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.OneToMany.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("56c847ae-c860-4f0f-819f-cc775517f716")]
	public partial class OneToMany : BaseRelationship
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OneToMany domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x56c847ae, 0xc860, 0x4f0f, 0x81, 0x9f, 0xcc, 0x77, 0x55, 0x17, 0xf7, 0x16);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OneToMany link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public OneToMany(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OneToMany.AggregationSourceDomainRoleId, source), new DslModeling::RoleAssignment(OneToMany.AggregationTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OneToMany(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OneToMany(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OneToMany(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OneToMany(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregationSource domain role code
		
		/// <summary>
		/// AggregationSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregationSourceDomainRoleId = new global::System.Guid(0xdb3c9e19, 0xe21a, 0x41a2, 0x96, 0x9b, 0x66, 0x6a, 0x6d, 0xb7, 0x96, 0xc5);
		
		/// <summary>
		/// DomainRole AggregationSource
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.OneToMany/AggregationSource.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.OneToMany/AggregationSource.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "OneToManyTargets", PropertyDisplayNameKey="consist.RapidEntity.OneToMany/AggregationSource.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("db3c9e19-e21a-41a2-969b-666a6db796c5")]
		public virtual ModelClass AggregationSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregationSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregationSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OneToManySources of a ModelClass
		/// <summary>
		/// Gets a list of OneToManySources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetOneToManySources(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, AggregationTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing AggregationSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AggregationSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AggregationSource = value;
			}
		}
		
		#endregion
		#region AggregationTarget domain role code
		
		/// <summary>
		/// AggregationTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregationTargetDomainRoleId = new global::System.Guid(0x212356a7, 0xa58d, 0x4856, 0x8c, 0x81, 0xf7, 0x7a, 0x65, 0x3c, 0xfc, 0x91);
		
		/// <summary>
		/// DomainRole AggregationTarget
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.OneToMany/AggregationTarget.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.OneToMany/AggregationTarget.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "OneToManySources", PropertyDisplayNameKey="consist.RapidEntity.OneToMany/AggregationTarget.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("212356a7-a58d-4856-8c81-f77a653cfc91")]
		public virtual ModelClass AggregationTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregationTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregationTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OneToManyTargets of a ModelClass
		/// <summary>
		/// Gets a list of OneToManyTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetOneToManyTargets(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, AggregationSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing AggregationTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AggregationTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AggregationTarget = value;
			}
		}
		
		#endregion
		#region RelationColumn domain property code
		
		/// <summary>
		/// RelationColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid RelationColumnDomainPropertyId = new global::System.Guid(0xe54e4fee, 0x8913, 0x4231, 0x83, 0x64, 0xab, 0x4a, 0xf2, 0x52, 0x44, 0x88);
		
		/// <summary>
		/// Storage for RelationColumn
		/// </summary>
		private global::System.String relationColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RelationColumn domain property.
		/// Description for consist.RapidEntity.OneToMany.Relation Column
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.OneToMany/RelationColumn.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.OneToMany/RelationColumn.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e54e4fee-8913-4231-8364-ab4af2524488")]
		public global::System.String RelationColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return relationColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RelationColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the OneToMany.RelationColumn domain property.
		/// </summary>
		internal sealed partial class RelationColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<OneToMany, global::System.String>
		{
			private RelationColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the OneToMany.RelationColumn domain property value handler.
			/// </summary>
			public static readonly RelationColumnPropertyHandler Instance = new RelationColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the OneToMany.RelationColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RelationColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(OneToMany element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.relationColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(OneToMany element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.relationColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Cascade domain property code
		
		/// <summary>
		/// Cascade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CascadeDomainPropertyId = new global::System.Guid(0xcafecae1, 0x8748, 0x49aa, 0x83, 0xde, 0x45, 0x3d, 0x83, 0xa1, 0x6d, 0xfd);
		
		/// <summary>
		/// Storage for Cascade
		/// </summary>
		private global::System.String cascadePropertyStorage = "Cascade.NOTSET";
		
		/// <summary>
		/// Gets or sets the value of Cascade domain property.
		/// Description for consist.RapidEntity.OneToMany.Cascade
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.OneToMany/Cascade.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.OneToMany/Cascade.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Cascade.NOTSET")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("cafecae1-8748-49aa-83de-453d83a16dfd")]
		public global::System.String Cascade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return cascadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CascadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the OneToMany.Cascade domain property.
		/// </summary>
		internal sealed partial class CascadePropertyHandler : DslModeling::DomainPropertyValueHandler<OneToMany, global::System.String>
		{
			private CascadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the OneToMany.Cascade domain property value handler.
			/// </summary>
			public static readonly CascadePropertyHandler Instance = new CascadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the OneToMany.Cascade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CascadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(OneToMany element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.cascadePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(OneToMany element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.cascadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregationSource link accessor
		/// <summary>
		/// Get the list of OneToMany links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.OneToMany> GetLinksToOneToManyTargets ( global::consist.RapidEntity.ModelClass aggregationSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.OneToMany>(aggregationSourceInstance, global::consist.RapidEntity.OneToMany.AggregationSourceDomainRoleId);
		}
		#endregion
		#region AggregationTarget link accessor
		/// <summary>
		/// Get the list of OneToMany links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.OneToMany> GetLinksToOneToManySources ( global::consist.RapidEntity.ModelClass aggregationTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.OneToMany>(aggregationTargetInstance, global::consist.RapidEntity.OneToMany.AggregationTargetDomainRoleId);
		}
		#endregion
		#region OneToMany instance accessors
		
		/// <summary>
		/// Get any OneToMany links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.OneToMany> GetLinks( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.ModelClass target )
		{
			global::System.Collections.Generic.List<global::consist.RapidEntity.OneToMany> outLinks = new global::System.Collections.Generic.List<global::consist.RapidEntity.OneToMany>();
			global::System.Collections.Generic.IList<global::consist.RapidEntity.OneToMany> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.OneToMany>(source, global::consist.RapidEntity.OneToMany.AggregationSourceDomainRoleId);
			foreach ( global::consist.RapidEntity.OneToMany link in links )
			{
				if ( target.Equals(link.AggregationTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainRelationship ModelRootHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ModelRootHasTypes.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ModelRootHasTypes.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e757a872-6a18-4297-9cb7-28bbfdddb645")]
	public partial class ModelRootHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe757a872, 0x6a18, 0x4297, 0x9c, 0xb7, 0x28, 0xbb, 0xfd, 0xdd, 0xb6, 0x45);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasTypes link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelRootHasTypes(ModelRoot source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasTypes.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasTypes.TypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x3b35e7dc, 0xc553, 0x4c9e, 0xb0, 0x0b, 0x9f, 0xef, 0x50, 0xec, 0x07, 0x56);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelRootHasTypes/ModelRoot.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelRootHasTypes/ModelRoot.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="consist.RapidEntity.ModelRootHasTypes/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3b35e7dc-c553-4c9e-b00b-9fef50ec0756")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelType
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TypeDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelType element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TypeDomainRoleId, newModelRoot);
		}
		#endregion
		#region Type domain role code
		
		/// <summary>
		/// Type domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainRoleId = new global::System.Guid(0x616cb0c9, 0xeb37, 0x4bd4, 0xb3, 0x2a, 0x3a, 0x29, 0x27, 0xa2, 0xf0, 0x3c);
		
		/// <summary>
		/// DomainRole Type
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelRootHasTypes/Type.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelRootHasTypes/Type.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("616cb0c9-eb37-4bd4-b32a-3a2927a2f03c")]
		public virtual ModelType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a ModelRoot
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetTypes(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasTypes links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ModelRootHasTypes> GetLinksToTypes ( global::consist.RapidEntity.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ModelRootHasTypes>(modelRootInstance, global::consist.RapidEntity.ModelRootHasTypes.ModelRootDomainRoleId);
		}
		#endregion
		#region Type link accessor
		/// <summary>
		/// Get the ModelRootHasTypes link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.ModelRootHasTypes GetLinkToModelRoot (global::consist.RapidEntity.ModelType typeInstance)
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ModelRootHasTypes>(typeInstance, global::consist.RapidEntity.ModelRootHasTypes.TypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Type not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasTypes instance accessors
		
		/// <summary>
		/// Get any ModelRootHasTypes links between a given ModelRoot and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ModelRootHasTypes> GetLinks( global::consist.RapidEntity.ModelRoot source, global::consist.RapidEntity.ModelType target )
		{
			global::System.Collections.Generic.List<global::consist.RapidEntity.ModelRootHasTypes> outLinks = new global::System.Collections.Generic.List<global::consist.RapidEntity.ModelRootHasTypes>();
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ModelRootHasTypes>(source, global::consist.RapidEntity.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::consist.RapidEntity.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasTypes link between a given ModelRootand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.ModelRootHasTypes GetLink( global::consist.RapidEntity.ModelRoot source, global::consist.RapidEntity.ModelType target )
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ModelRootHasTypes>(source, global::consist.RapidEntity.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::consist.RapidEntity.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.CommentReferencesSubjects.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.CommentReferencesSubjects.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("8ec6619c-21e8-4625-89cc-a7a8a14633e1")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8ec6619c, 0x21e8, 0x4625, 0x89, 0xcc, 0xa7, 0xa8, 0xa1, 0x46, 0x33, 0xe1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x9061f823, 0x5ec1, 0x4c16, 0xb1, 0xe5, 0x88, 0x9b, 0x02, 0xc1, 0xfc, 0x75);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.CommentReferencesSubjects/Comment.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.CommentReferencesSubjects/Comment.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="consist.RapidEntity.CommentReferencesSubjects/Comment.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9061f823-5ec1-4c16-b1e5-889b02c1fc75")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelType
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x99ea99fb, 0x298f, 0x4126, 0xad, 0xc2, 0x5c, 0xbe, 0x5a, 0x24, 0xe2, 0x03);
		
		/// <summary>
		/// DomainRole Subject
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.CommentReferencesSubjects/Subject.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.CommentReferencesSubjects/Subject.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="consist.RapidEntity.CommentReferencesSubjects/Subject.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("99ea99fb-298f-4126-adc2-5cbe5a24e203")]
		public virtual ModelType Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetSubjects(Comment element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.CommentReferencesSubjects> GetLinksToSubjects ( global::consist.RapidEntity.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.CommentReferencesSubjects>(commentInstance, global::consist.RapidEntity.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.CommentReferencesSubjects> GetLinksToComments ( global::consist.RapidEntity.ModelType subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.CommentReferencesSubjects>(subjectInstance, global::consist.RapidEntity.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.CommentReferencesSubjects> GetLinks( global::consist.RapidEntity.Comment source, global::consist.RapidEntity.ModelType target )
		{
			global::System.Collections.Generic.List<global::consist.RapidEntity.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::consist.RapidEntity.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::consist.RapidEntity.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.CommentReferencesSubjects>(source, global::consist.RapidEntity.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::consist.RapidEntity.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.CommentReferencesSubjects GetLink( global::consist.RapidEntity.Comment source, global::consist.RapidEntity.ModelType target )
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.CommentReferencesSubjects>(source, global::consist.RapidEntity.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::consist.RapidEntity.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainRelationship ManyToMany
	/// Description for consist.RapidEntity.ManyToMany
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ManyToMany.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ManyToMany.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b7be6d9e-0048-4fd5-8f5b-6b1771b19a17")]
	public partial class ManyToMany : BaseRelationship
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ManyToMany domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb7be6d9e, 0x0048, 0x4fd5, 0x8f, 0x5b, 0x6b, 0x17, 0x71, 0xb1, 0x9a, 0x17);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ManyToMany link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public ManyToMany(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ManyToMany.SourceModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ManyToMany.TargetModelClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ManyToMany(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ManyToMany(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ManyToMany(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ManyToMany(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceModelClass domain role code
		
		/// <summary>
		/// SourceModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceModelClassDomainRoleId = new global::System.Guid(0xa58ac9a3, 0x218d, 0x44c7, 0xa9, 0x3f, 0x82, 0x2a, 0x33, 0x03, 0xb0, 0x85);
		
		/// <summary>
		/// DomainRole SourceModelClass
		/// Description for consist.RapidEntity.ManyToMany.SourceModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ManyToMany/SourceModelClass.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ManyToMany/SourceModelClass.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ManyTargetModel", PropertyDisplayNameKey="consist.RapidEntity.ManyToMany/SourceModelClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a58ac9a3-218d-44c7-a93f-822a3303b085")]
		public virtual ModelClass SourceModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ManySourceModels of a ModelClass
		/// <summary>
		/// Gets a list of ManySourceModels.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetManySourceModels(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, TargetModelClassDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing SourceModelClass domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SourceModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SourceModelClass = value;
			}
		}
		
		#endregion
		#region TargetModelClass domain role code
		
		/// <summary>
		/// TargetModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetModelClassDomainRoleId = new global::System.Guid(0xdf0c9af6, 0x166d, 0x41fd, 0x90, 0xb0, 0xe5, 0x9e, 0x93, 0x4b, 0xe4, 0x3f);
		
		/// <summary>
		/// DomainRole TargetModelClass
		/// Description for consist.RapidEntity.ManyToMany.TargetModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ManyToMany/TargetModelClass.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ManyToMany/TargetModelClass.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ManySourceModels", PropertyDisplayNameKey="consist.RapidEntity.ManyToMany/TargetModelClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("df0c9af6-166d-41fd-90b0-e59e934be43f")]
		public virtual ModelClass TargetModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ManyTargetModel of a ModelClass
		/// <summary>
		/// Gets a list of ManyTargetModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetManyTargetModel(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, SourceModelClassDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing TargetModelClass domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TargetModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TargetModelClass = value;
			}
		}
		
		#endregion
		#region JoinTable domain property code
		
		/// <summary>
		/// JoinTable domain property Id.
		/// </summary>
		public static readonly global::System.Guid JoinTableDomainPropertyId = new global::System.Guid(0xd15e43dc, 0x5590, 0x49c0, 0xba, 0x97, 0xf1, 0xf1, 0x0d, 0x14, 0xb8, 0xd0);
		
		/// <summary>
		/// Storage for JoinTable
		/// </summary>
		private global::System.String joinTablePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of JoinTable domain property.
		/// Description for consist.RapidEntity.ManyToMany.Join Table
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ManyToMany/JoinTable.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ManyToMany/JoinTable.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("d15e43dc-5590-49c0-ba97-f1f10d14b8d0")]
		public global::System.String JoinTable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return joinTablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				JoinTablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ManyToMany.JoinTable domain property.
		/// </summary>
		internal sealed partial class JoinTablePropertyHandler : DslModeling::DomainPropertyValueHandler<ManyToMany, global::System.String>
		{
			private JoinTablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ManyToMany.JoinTable domain property value handler.
			/// </summary>
			public static readonly JoinTablePropertyHandler Instance = new JoinTablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ManyToMany.JoinTable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return JoinTableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ManyToMany element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.joinTablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ManyToMany element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.joinTablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region JoinColumn domain property code
		
		/// <summary>
		/// JoinColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid JoinColumnDomainPropertyId = new global::System.Guid(0x231c557f, 0x6a87, 0x4dc7, 0xb9, 0xee, 0xdb, 0x95, 0xaf, 0xed, 0x1e, 0xb2);
		
		/// <summary>
		/// Storage for JoinColumn
		/// </summary>
		private global::System.String joinColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of JoinColumn domain property.
		/// Description for consist.RapidEntity.ManyToMany.Join Column
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ManyToMany/JoinColumn.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ManyToMany/JoinColumn.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("231c557f-6a87-4dc7-b9ee-db95afed1eb2")]
		public global::System.String JoinColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return joinColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				JoinColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ManyToMany.JoinColumn domain property.
		/// </summary>
		internal sealed partial class JoinColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<ManyToMany, global::System.String>
		{
			private JoinColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ManyToMany.JoinColumn domain property value handler.
			/// </summary>
			public static readonly JoinColumnPropertyHandler Instance = new JoinColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ManyToMany.JoinColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return JoinColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ManyToMany element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.joinColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ManyToMany element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.joinColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OwnerColumn domain property code
		
		/// <summary>
		/// OwnerColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid OwnerColumnDomainPropertyId = new global::System.Guid(0xe1ca1b20, 0x339e, 0x444f, 0x9a, 0x1d, 0x39, 0x4e, 0xc9, 0x18, 0x2a, 0x36);
		
		/// <summary>
		/// Storage for OwnerColumn
		/// </summary>
		private global::System.String ownerColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OwnerColumn domain property.
		/// Description for consist.RapidEntity.ManyToMany.Owner Column
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ManyToMany/OwnerColumn.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ManyToMany/OwnerColumn.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e1ca1b20-339e-444f-9a1d-394ec9182a36")]
		public global::System.String OwnerColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ownerColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OwnerColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ManyToMany.OwnerColumn domain property.
		/// </summary>
		internal sealed partial class OwnerColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<ManyToMany, global::System.String>
		{
			private OwnerColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ManyToMany.OwnerColumn domain property value handler.
			/// </summary>
			public static readonly OwnerColumnPropertyHandler Instance = new OwnerColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ManyToMany.OwnerColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OwnerColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ManyToMany element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ownerColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ManyToMany element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.ownerColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Cascade domain property code
		
		/// <summary>
		/// Cascade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CascadeDomainPropertyId = new global::System.Guid(0xe625d320, 0xc6b7, 0x43b5, 0xa6, 0x2f, 0xea, 0x8d, 0x75, 0x37, 0xb3, 0x66);
		
		/// <summary>
		/// Storage for Cascade
		/// </summary>
		private global::System.String cascadePropertyStorage = "Cascade.NOTSET";
		
		/// <summary>
		/// Gets or sets the value of Cascade domain property.
		/// Description for consist.RapidEntity.ManyToMany.Cascade
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ManyToMany/Cascade.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ManyToMany/Cascade.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Cascade.NOTSET")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e625d320-c6b7-43b5-a62f-ea8d7537b366")]
		public global::System.String Cascade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return cascadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CascadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ManyToMany.Cascade domain property.
		/// </summary>
		internal sealed partial class CascadePropertyHandler : DslModeling::DomainPropertyValueHandler<ManyToMany, global::System.String>
		{
			private CascadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ManyToMany.Cascade domain property value handler.
			/// </summary>
			public static readonly CascadePropertyHandler Instance = new CascadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ManyToMany.Cascade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CascadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ManyToMany element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.cascadePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ManyToMany element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.cascadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OwnerKey domain property code
		
		/// <summary>
		/// OwnerKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid OwnerKeyDomainPropertyId = new global::System.Guid(0xfef4c4c6, 0x2e0f, 0x425c, 0xbb, 0xf3, 0x70, 0x20, 0x9c, 0xcb, 0x0d, 0xb0);
		
		/// <summary>
		/// Storage for OwnerKey
		/// </summary>
		private global::System.String ownerKeyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OwnerKey domain property.
		/// Description for consist.RapidEntity.ManyToMany.Owner Key
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ManyToMany/OwnerKey.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ManyToMany/OwnerKey.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fef4c4c6-2e0f-425c-bbf3-70209ccb0db0")]
		public global::System.String OwnerKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ownerKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OwnerKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ManyToMany.OwnerKey domain property.
		/// </summary>
		internal sealed partial class OwnerKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<ManyToMany, global::System.String>
		{
			private OwnerKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ManyToMany.OwnerKey domain property value handler.
			/// </summary>
			public static readonly OwnerKeyPropertyHandler Instance = new OwnerKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ManyToMany.OwnerKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OwnerKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ManyToMany element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ownerKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ManyToMany element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.ownerKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceModelClass link accessor
		/// <summary>
		/// Get the list of ManyToMany links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ManyToMany> GetLinksToManyTargetModel ( global::consist.RapidEntity.ModelClass sourceModelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ManyToMany>(sourceModelClassInstance, global::consist.RapidEntity.ManyToMany.SourceModelClassDomainRoleId);
		}
		#endregion
		#region TargetModelClass link accessor
		/// <summary>
		/// Get the list of ManyToMany links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ManyToMany> GetLinksToManySourceModels ( global::consist.RapidEntity.ModelClass targetModelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ManyToMany>(targetModelClassInstance, global::consist.RapidEntity.ManyToMany.TargetModelClassDomainRoleId);
		}
		#endregion
		#region ManyToMany instance accessors
		
		/// <summary>
		/// Get any ManyToMany links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ManyToMany> GetLinks( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.ModelClass target )
		{
			global::System.Collections.Generic.List<global::consist.RapidEntity.ManyToMany> outLinks = new global::System.Collections.Generic.List<global::consist.RapidEntity.ManyToMany>();
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ManyToMany> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ManyToMany>(source, global::consist.RapidEntity.ManyToMany.SourceModelClassDomainRoleId);
			foreach ( global::consist.RapidEntity.ManyToMany link in links )
			{
				if ( target.Equals(link.TargetModelClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ManyToMany link between a given ModelClassand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.ManyToMany GetLink( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ManyToMany> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ManyToMany>(source, global::consist.RapidEntity.ManyToMany.SourceModelClassDomainRoleId);
			foreach ( global::consist.RapidEntity.ManyToMany link in links )
			{
				if ( target.Equals(link.TargetModelClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainRelationship ClassHasPersistentKeys
	/// Description for consist.RapidEntity.ClassHasPersistentKeys
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ClassHasPersistentKeys.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ClassHasPersistentKeys.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d8ebf6d7-1637-4657-aaaf-b4a2ffb2c314")]
	public partial class ClassHasPersistentKeys : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasPersistentKeys domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd8ebf6d7, 0x1637, 0x4657, 0xaa, 0xaf, 0xb4, 0xa2, 0xff, 0xb2, 0xc3, 0x14);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasPersistentKeys link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">PersistentKey to use as the target of the relationship.</param>
		public ClassHasPersistentKeys(ModelClass source, PersistentKey target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasPersistentKeys.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasPersistentKeys.PersistentKeyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasPersistentKeys(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasPersistentKeys(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasPersistentKeys(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasPersistentKeys(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x92a845d5, 0xa5cf, 0x4d2b, 0xa9, 0x29, 0xb2, 0x01, 0x37, 0x3e, 0x75, 0xe7);
		
		/// <summary>
		/// DomainRole ModelClass
		/// Description for consist.RapidEntity.ClassHasPersistentKeys.ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ClassHasPersistentKeys/ModelClass.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ClassHasPersistentKeys/ModelClass.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PersistentKeys", PropertyDisplayNameKey="consist.RapidEntity.ClassHasPersistentKeys/ModelClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("92a845d5-a5cf-4d2b-a929-b201373e75e7")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a PersistentKey
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(PersistentKey element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PersistentKeyDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(PersistentKey element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PersistentKeyDomainRoleId, newModelClass);
		}
		#endregion
		#region PersistentKey domain role code
		
		/// <summary>
		/// PersistentKey domain role Id.
		/// </summary>
		public static readonly global::System.Guid PersistentKeyDomainRoleId = new global::System.Guid(0x317db333, 0xa89a, 0x4f22, 0x88, 0x62, 0xde, 0x00, 0x74, 0xb1, 0xeb, 0x67);
		
		/// <summary>
		/// DomainRole PersistentKey
		/// Description for consist.RapidEntity.ClassHasPersistentKeys.PersistentKey
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ClassHasPersistentKeys/PersistentKey.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ClassHasPersistentKeys/PersistentKey.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="consist.RapidEntity.ClassHasPersistentKeys/PersistentKey.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("317db333-a89a-4f22-8862-de0074b1eb67")]
		public virtual PersistentKey PersistentKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PersistentKey)DslModeling::DomainRoleInfo.GetRolePlayer(this, PersistentKeyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PersistentKeyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PersistentKeys of a ModelClass
		/// <summary>
		/// Gets a list of PersistentKeys.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PersistentKey> GetPersistentKeys(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PersistentKey>, PersistentKey>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasPersistentKeys links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ClassHasPersistentKeys> GetLinksToPersistentKeys ( global::consist.RapidEntity.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ClassHasPersistentKeys>(modelClassInstance, global::consist.RapidEntity.ClassHasPersistentKeys.ModelClassDomainRoleId);
		}
		#endregion
		#region PersistentKey link accessor
		/// <summary>
		/// Get the ClassHasPersistentKeys link to a PersistentKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.ClassHasPersistentKeys GetLinkToModelClass (global::consist.RapidEntity.PersistentKey persistentKeyInstance)
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ClassHasPersistentKeys> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ClassHasPersistentKeys>(persistentKeyInstance, global::consist.RapidEntity.ClassHasPersistentKeys.PersistentKeyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PersistentKey not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasPersistentKeys instance accessors
		
		/// <summary>
		/// Get any ClassHasPersistentKeys links between a given ModelClass and a PersistentKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::consist.RapidEntity.ClassHasPersistentKeys> GetLinks( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.PersistentKey target )
		{
			global::System.Collections.Generic.List<global::consist.RapidEntity.ClassHasPersistentKeys> outLinks = new global::System.Collections.Generic.List<global::consist.RapidEntity.ClassHasPersistentKeys>();
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ClassHasPersistentKeys> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ClassHasPersistentKeys>(source, global::consist.RapidEntity.ClassHasPersistentKeys.ModelClassDomainRoleId);
			foreach ( global::consist.RapidEntity.ClassHasPersistentKeys link in links )
			{
				if ( target.Equals(link.PersistentKey) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasPersistentKeys link between a given ModelClassand a PersistentKey.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::consist.RapidEntity.ClassHasPersistentKeys GetLink( global::consist.RapidEntity.ModelClass source, global::consist.RapidEntity.PersistentKey target )
		{
			global::System.Collections.Generic.IList<global::consist.RapidEntity.ClassHasPersistentKeys> links = DslModeling::DomainRoleInfo.GetElementLinks<global::consist.RapidEntity.ClassHasPersistentKeys>(source, global::consist.RapidEntity.ClassHasPersistentKeys.ModelClassDomainRoleId);
			foreach ( global::consist.RapidEntity.ClassHasPersistentKeys link in links )
			{
				if ( target.Equals(link.PersistentKey) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
