//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainClass NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.NamedElement.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.NamedElement.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("ca28a2a1-63d2-4ee9-acfe-4fa15bfc8599")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xca28a2a1, 0x63d2, 0x4ee9, 0xac, 0xfe, 0x4f, 0xa1, 0x5b, 0xfc, 0x85, 0x99);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xcc49aa62, 0x6084, 0x449b, 0x92, 0x7c, 0x59, 0x8f, 0x30, 0x1e, 0x62, 0x69);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.NamedElement/Name.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.NamedElement/Name.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("cc49aa62-6084-449b-927c-598f301e6269")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainClass ModelRoot
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ModelRoot.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ModelRoot.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("03788f77-178f-413d-b59b-e2c145f69dd6")]
	public partial class ModelRoot : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x03788f77, 0x178f, 0x413d, 0xb5, 0x9b, 0xe2, 0xc1, 0x45, 0xf6, 0x9d, 0xd6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::consist.RapidEntity.ModelRootHasComments.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Types opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::consist.RapidEntity.ModelRootHasTypes.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::consist.RapidEntity.ModelType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::consist.RapidEntity.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::consist.RapidEntity.ModelType sourceModelType1 = sourceElement as global::consist.RapidEntity.ModelType;
			if (sourceModelType1 != null)
			{
				// Create link for path ModelRootHasTypes.Types
				this.Types.Add(sourceModelType1);

				return;
			}
				
			global::consist.RapidEntity.Comment sourceComment2 = sourceElement as global::consist.RapidEntity.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path ModelRootHasComments.Comments
				this.Comments.Add(sourceComment2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::consist.RapidEntity.ModelType sourceModelType1 = sourceElement as global::consist.RapidEntity.ModelType;
			if (sourceModelType1 != null)
			{
				// Delete link for path ModelRootHasTypes.Types
				
				foreach (DslModeling::ElementLink link in global::consist.RapidEntity.ModelRootHasTypes.GetLinks((global::consist.RapidEntity.ModelRoot)this, sourceModelType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::consist.RapidEntity.ModelRootHasTypes.ModelRootDomainRoleId, global::consist.RapidEntity.ModelRootHasTypes.TypeDomainRoleId);
				}

				return;
			}
				
			global::consist.RapidEntity.Comment sourceComment2 = sourceElement as global::consist.RapidEntity.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path ModelRootHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::consist.RapidEntity.ModelRootHasComments.GetLinks((global::consist.RapidEntity.ModelRoot)this, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::consist.RapidEntity.ModelRootHasComments.ModelRootDomainRoleId, global::consist.RapidEntity.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainClass ModelClass
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ModelClass.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ModelClass.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bbb854cf-7915-43d6-8727-a8e102e4e04c")]
	public partial class ModelClass : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbbb854cf, 0x7915, 0x43d6, 0x87, 0x27, 0xa8, 0xe1, 0x02, 0xe4, 0xe0, 0x4c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Kind domain property code
		
		/// <summary>
		/// Kind domain property Id.
		/// </summary>
		public static readonly global::System.Guid KindDomainPropertyId = new global::System.Guid(0xcef9a7e8, 0x3d55, 0x43cc, 0x8f, 0xd7, 0xea, 0x83, 0xe3, 0xb1, 0x8e, 0xd4);
		
		/// <summary>
		/// Storage for Kind
		/// </summary>
		private global::System.String kindPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Kind domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelClass/Kind.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelClass/Kind.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("cef9a7e8-3d55-43cc-8fd7-ea83e3b18ed4")]
		public global::System.String Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return kindPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KindPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Kind domain property.
		/// </summary>
		internal sealed partial class KindPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private KindPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Kind domain property value handler.
			/// </summary>
			public static readonly KindPropertyHandler Instance = new KindPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Kind domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KindDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.kindPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.kindPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAbstract domain property code
		
		/// <summary>
		/// IsAbstract domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAbstractDomainPropertyId = new global::System.Guid(0x7fbb3157, 0xc4f6, 0x41d5, 0xa8, 0x83, 0x5b, 0xaf, 0xf5, 0x96, 0x51, 0x9d);
		
		/// <summary>
		/// Storage for IsAbstract
		/// </summary>
		private InheritanceModifier isAbstractPropertyStorage = InheritanceModifier.None;
		
		/// <summary>
		/// Gets or sets the value of IsAbstract domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelClass/IsAbstract.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelClass/IsAbstract.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(InheritanceModifier.None)]
		[DslModeling::DomainObjectId("7fbb3157-c4f6-41d5-a883-5baff596519d")]
		public InheritanceModifier IsAbstract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAbstractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAbstractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsAbstract domain property.
		/// </summary>
		internal sealed partial class IsAbstractPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, InheritanceModifier>
		{
			private IsAbstractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsAbstract domain property value handler.
			/// </summary>
			public static readonly IsAbstractPropertyHandler Instance = new IsAbstractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsAbstract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAbstractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed InheritanceModifier GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAbstractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, InheritanceModifier newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				InheritanceModifier oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAbstractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TableName domain property code
		
		/// <summary>
		/// TableName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableNameDomainPropertyId = new global::System.Guid(0xc5d528d1, 0x7949, 0x42ec, 0xb4, 0x73, 0xaf, 0x76, 0x92, 0x71, 0x61, 0x1a);
		
		/// <summary>
		/// Storage for TableName
		/// </summary>
		private global::System.String tableNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TableName domain property.
		/// Description for consist.RapidEntity.ModelClass.Table Name
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelClass/TableName.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelClass/TableName.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c5d528d1-7949-42ec-b473-af769271611a")]
		public global::System.String TableName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tableNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TableNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.TableName domain property.
		/// </summary>
		internal sealed partial class TableNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private TableNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.TableName domain property value handler.
			/// </summary>
			public static readonly TableNamePropertyHandler Instance = new TableNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.TableName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tableNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tableNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ParentName domain property code
		
		/// <summary>
		/// ParentName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ParentNameDomainPropertyId = new global::System.Guid(0xe176246c, 0xecee, 0x4ff4, 0xa7, 0x37, 0x5c, 0x3c, 0x6d, 0x2f, 0x28, 0x83);
		
		/// <summary>
		/// Storage for ParentName
		/// </summary>
		private global::System.String parentNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ParentName domain property.
		/// Description for consist.RapidEntity.ModelClass.Parent Name
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelClass/ParentName.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelClass/ParentName.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("e176246c-ecee-4ff4-a737-5c3c6d2f2883")]
		public global::System.String ParentName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return parentNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ParentNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.ParentName domain property.
		/// </summary>
		internal sealed partial class ParentNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private ParentNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.ParentName domain property value handler.
			/// </summary>
			public static readonly ParentNamePropertyHandler Instance = new ParentNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.ParentName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ParentNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.parentNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.parentNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ModelClass> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ModelClass>, ModelClass>(global::consist.RapidEntity.BaseRelationship.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ModelClass> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ModelClass>, ModelClass>(global::consist.RapidEntity.BaseRelationship.TargetDomainRoleId);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::consist.RapidEntity.ClassHasFields.ModelClassDomainRoleId);
			}
		}
		#endregion
		#region Subclasses opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Subclasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::consist.RapidEntity.Generalization.SuperclassDomainRoleId);
			}
		}
		#endregion
		#region Superclass opposite domain role accessor
		/// <summary>
		/// Gets or sets Superclass.
		/// </summary>
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::consist.RapidEntity.Generalization.SubclassDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::consist.RapidEntity.Generalization.SubclassDomainRoleId, value);
			}
		}
		#endregion
		#region OneToOneTargets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of OneToOneTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> OneToOneTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::consist.RapidEntity.OneToOne.BidirectionalSourceDomainRoleId);
			}
		}
		#endregion
		#region OneToOneSources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of OneToOneSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> OneToOneSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::consist.RapidEntity.OneToOne.BidirectionalTargetDomainRoleId);
			}
		}
		#endregion
		#region OneToManyTargets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of OneToManyTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> OneToManyTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::consist.RapidEntity.OneToMany.AggregationSourceDomainRoleId);
			}
		}
		#endregion
		#region OneToManySources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of OneToManySources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> OneToManySources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::consist.RapidEntity.OneToMany.AggregationTargetDomainRoleId);
			}
		}
		#endregion
		#region ManyTargetModel opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ManyTargetModel.
		/// Description for consist.RapidEntity.ManyToMany.SourceModelClass
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> ManyTargetModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::consist.RapidEntity.ManyToMany.SourceModelClassDomainRoleId);
			}
		}
		#endregion
		#region ManySourceModels opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ManySourceModels.
		/// Description for consist.RapidEntity.ManyToMany.TargetModelClass
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> ManySourceModels
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::consist.RapidEntity.ManyToMany.TargetModelClassDomainRoleId);
			}
		}
		#endregion
		#region PersistentKeys opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PersistentKeys.
		/// Description for consist.RapidEntity.ClassHasPersistentKeys.ModelClass
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PersistentKey> PersistentKeys
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PersistentKey>, PersistentKey>(global::consist.RapidEntity.ClassHasPersistentKeys.ModelClassDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::consist.RapidEntity.PersistentKey.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::consist.RapidEntity.Field.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::consist.RapidEntity.PersistentKey sourcePersistentKey1 = sourceElement as global::consist.RapidEntity.PersistentKey;
			if (sourcePersistentKey1 != null)
			{
				// Create link for path ClassHasPersistentKeys.PersistentKeys
				this.PersistentKeys.Add(sourcePersistentKey1);

				return;
			}
				
			global::consist.RapidEntity.Field sourceField2 = sourceElement as global::consist.RapidEntity.Field;
			if (sourceField2 != null)
			{
				// Create link for path ClassHasFields.Fields
				this.Fields.Add(sourceField2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::consist.RapidEntity.PersistentKey sourcePersistentKey1 = sourceElement as global::consist.RapidEntity.PersistentKey;
			if (sourcePersistentKey1 != null)
			{
				// Delete link for path ClassHasPersistentKeys.PersistentKeys
				
				foreach (DslModeling::ElementLink link in global::consist.RapidEntity.ClassHasPersistentKeys.GetLinks((global::consist.RapidEntity.ModelClass)this, sourcePersistentKey1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::consist.RapidEntity.ClassHasPersistentKeys.ModelClassDomainRoleId, global::consist.RapidEntity.ClassHasPersistentKeys.PersistentKeyDomainRoleId);
				}

				return;
			}
				
			global::consist.RapidEntity.Field sourceField2 = sourceElement as global::consist.RapidEntity.Field;
			if (sourceField2 != null)
			{
				// Delete link for path ClassHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::consist.RapidEntity.ClassHasFields.GetLinks((global::consist.RapidEntity.ModelClass)this, sourceField2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::consist.RapidEntity.ClassHasFields.ModelClassDomainRoleId, global::consist.RapidEntity.ClassHasFields.AttributeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainClass Field
	/// An attribute of a class.
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.Field.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.Field.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c8209cc1-12fb-48f0-b1bc-b3abb54802d1")]
	public partial class Field : ModelAttribute
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Field domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc8209cc1, 0x12fb, 0x48f0, 0xb1, 0xbc, 0xb3, 0xab, 0xb5, 0x48, 0x02, 0xd1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Field(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Field(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelClass.
		/// </summary>
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::consist.RapidEntity.ClassHasFields.AttributeDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::consist.RapidEntity.ClassHasFields.AttributeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.Comment.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.Comment.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("743fe339-dc13-44bb-ace7-060dd9db7c0f")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x743fe339, 0xdc13, 0x44bb, 0xac, 0xe7, 0x06, 0x0d, 0xd9, 0xdb, 0x7c, 0x0f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x97c14f94, 0x78fb, 0x4424, 0xa5, 0xe5, 0x50, 0xd4, 0xb2, 0x9a, 0x17, 0xe6);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.Comment/Text.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.Comment/Text.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("97c14f94-78fb-4424-a5e5-50d4b29a17e6")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::consist.RapidEntity.ModelRootHasComments.CommentDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::consist.RapidEntity.ModelRootHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::consist.RapidEntity.CommentReferencesSubjects.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainClass ModelType
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ModelType.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ModelType.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8aa4f57a-f10f-45a0-b093-3705ebb61dce")]
	public abstract partial class ModelType : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8aa4f57a, 0xf10f, 0x45a0, 0xb0, 0x93, 0x37, 0x05, 0xeb, 0xb6, 0x1d, 0xce);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::consist.RapidEntity.ModelRootHasTypes.TypeDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::consist.RapidEntity.ModelRootHasTypes.TypeDomainRoleId, value);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::consist.RapidEntity.CommentReferencesSubjects.SubjectDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::consist.RapidEntity.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::consist.RapidEntity.Comment sourceComment1 = sourceElement as global::consist.RapidEntity.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path CommentReferencesSubjects.Comments
				this.Comments.Add(sourceComment1);

				// Create link for path ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
						// Segments 0 and 1
						global::consist.RapidEntity.ModelRoot commentHost1 = this.ModelRoot;
						if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				commentHost1.Comments.Add(sourceComment1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::consist.RapidEntity.Comment sourceComment1 = sourceElement as global::consist.RapidEntity.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path CommentReferencesSubjects.Comments
				
				foreach (DslModeling::ElementLink link in global::consist.RapidEntity.CommentReferencesSubjects.GetLinks(sourceComment1, (global::consist.RapidEntity.ModelType)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::consist.RapidEntity.CommentReferencesSubjects.SubjectDomainRoleId, global::consist.RapidEntity.CommentReferencesSubjects.CommentDomainRoleId);
				}

				// Delete link for path ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
					// Segments 0 and 1
					global::consist.RapidEntity.ModelRoot commentHost1 = this.ModelRoot;
					if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::consist.RapidEntity.ModelRootHasComments.GetLinks((global::consist.RapidEntity.ModelRoot)commentHost1, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::consist.RapidEntity.ModelRootHasComments.ModelRootDomainRoleId, global::consist.RapidEntity.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainClass ClassModelElement
	/// Element with a Description
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ClassModelElement.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ClassModelElement.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a71b24b4-525c-4caf-9f02-267c9247d388")]
	public abstract partial class ClassModelElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa71b24b4, 0x525c, 0x4caf, 0x9f, 0x02, 0x26, 0x7c, 0x92, 0x47, 0xd3, 0x88);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ClassModelElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainClass PersistentKey
	/// Description for consist.RapidEntity.PersistentKey
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.PersistentKey.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.PersistentKey.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("718418c3-17c9-4830-abab-7e1cf343b4bb")]
	public partial class PersistentKey : ModelAttribute
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PersistentKey domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x718418c3, 0x17c9, 0x4830, 0xab, 0xab, 0x7e, 0x1c, 0xf3, 0x43, 0xb4, 0xbb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PersistentKey(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PersistentKey(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsAutoKey domain property code
		
		/// <summary>
		/// IsAutoKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAutoKeyDomainPropertyId = new global::System.Guid(0x95762e74, 0x97b4, 0x4aa0, 0x99, 0x4d, 0xf0, 0x74, 0xd4, 0x03, 0x9c, 0x4b);
		
		/// <summary>
		/// Storage for IsAutoKey
		/// </summary>
		private global::System.Boolean isAutoKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAutoKey domain property.
		/// Description for consist.RapidEntity.PersistentKey.Is Auto Key
		/// </summary>
		[System.ComponentModel.Editor(typeof(consist.RapidEntity.Customizations.EntityProperties.EntityPropertyEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("consist.RapidEntity.PersistentKey/IsAutoKey.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.PersistentKey/IsAutoKey.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("95762e74-97b4-4aa0-994d-f074d4039c4b")]
		public global::System.Boolean IsAutoKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAutoKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAutoKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentKey.IsAutoKey domain property.
		/// </summary>
		internal sealed partial class IsAutoKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentKey, global::System.Boolean>
		{
			private IsAutoKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentKey.IsAutoKey domain property value handler.
			/// </summary>
			public static readonly IsAutoKeyPropertyHandler Instance = new IsAutoKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentKey.IsAutoKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAutoKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PersistentKey element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAutoKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentKey element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAutoKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelClass opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelClass.
		/// Description for consist.RapidEntity.ClassHasPersistentKeys.PersistentKey
		/// </summary>
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::consist.RapidEntity.ClassHasPersistentKeys.PersistentKeyDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::consist.RapidEntity.ClassHasPersistentKeys.PersistentKeyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace consist.RapidEntity
{
	/// <summary>
	/// DomainClass ModelAttribute
	/// Description for consist.RapidEntity.ModelAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("consist.RapidEntity.ModelAttribute.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("consist.RapidEntity.ModelAttribute.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::consist.RapidEntity.RapidEntityDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9f85f547-85da-445d-9722-b1d72e5723de")]
	public partial class ModelAttribute : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9f85f547, 0x85da, 0x445d, 0x97, 0x22, 0xb1, 0xd7, 0x2e, 0x57, 0x23, 0xde);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xdad27be4, 0xc014, 0x448b, 0xaf, 0xdb, 0xfa, 0x85, 0xa1, 0x80, 0x91, 0xf7);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for consist.RapidEntity.ModelAttribute.Type
		/// </summary>
		[System.ComponentModel.Editor(typeof(consist.RapidEntity.Customizations.EntityProperties.EntityPropertyEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelAttribute/Type.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelAttribute/Type.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("dad27be4-c014-448b-afdb-fa85a18091f7")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ColumnName domain property code
		
		/// <summary>
		/// ColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnNameDomainPropertyId = new global::System.Guid(0x2e789c55, 0xe937, 0x45e1, 0x96, 0x13, 0xb6, 0x9c, 0x08, 0x92, 0x32, 0x2d);
		
		/// <summary>
		/// Storage for ColumnName
		/// </summary>
		private global::System.String columnNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ColumnName domain property.
		/// Description for consist.RapidEntity.ModelAttribute.Column Name
		/// </summary>
		[System.ComponentModel.Editor(typeof(consist.RapidEntity.Customizations.EntityProperties.EntityPropertyEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelAttribute/ColumnName.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelAttribute/ColumnName.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2e789c55-e937-45e1-9613-b69c0892322d")]
		public global::System.String ColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return columnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.ColumnName domain property.
		/// </summary>
		internal sealed partial class ColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private ColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.ColumnName domain property value handler.
			/// </summary>
			public static readonly ColumnNamePropertyHandler Instance = new ColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.ColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.columnNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.columnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AllowNull domain property code
		
		/// <summary>
		/// AllowNull domain property Id.
		/// </summary>
		public static readonly global::System.Guid AllowNullDomainPropertyId = new global::System.Guid(0x42ed9e26, 0x5d92, 0x4b0c, 0xb7, 0x55, 0xcb, 0x32, 0x76, 0xc5, 0xbc, 0x56);
		
		/// <summary>
		/// Storage for AllowNull
		/// </summary>
		private global::System.Boolean allowNullPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of AllowNull domain property.
		/// Description for consist.RapidEntity.ModelAttribute.Allow Null
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelAttribute/AllowNull.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelAttribute/AllowNull.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("42ed9e26-5d92-4b0c-b755-cb3276c5bc56")]
		public global::System.Boolean AllowNull
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return allowNullPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AllowNullPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.AllowNull domain property.
		/// </summary>
		internal sealed partial class AllowNullPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private AllowNullPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.AllowNull domain property value handler.
			/// </summary>
			public static readonly AllowNullPropertyHandler Instance = new AllowNullPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.AllowNull domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AllowNullDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.allowNullPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.allowNullPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Precision domain property code
		
		/// <summary>
		/// Precision domain property Id.
		/// </summary>
		public static readonly global::System.Guid PrecisionDomainPropertyId = new global::System.Guid(0x18b41612, 0x70f6, 0x4728, 0x8c, 0xfa, 0xee, 0xba, 0x7f, 0x07, 0x8e, 0x5e);
		
		/// <summary>
		/// Storage for Precision
		/// </summary>
		private global::System.Int32 precisionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Precision domain property.
		/// Description for consist.RapidEntity.ModelAttribute.Precision
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelAttribute/Precision.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelAttribute/Precision.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("18b41612-70f6-4728-8cfa-eeba7f078e5e")]
		public global::System.Int32 Precision
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return precisionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PrecisionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Precision domain property.
		/// </summary>
		internal sealed partial class PrecisionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Int32>
		{
			private PrecisionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Precision domain property value handler.
			/// </summary>
			public static readonly PrecisionPropertyHandler Instance = new PrecisionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Precision domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PrecisionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.precisionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.precisionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0xf8f07f85, 0xbe86, 0x40fa, 0xbc, 0x49, 0x3f, 0x85, 0x26, 0xe2, 0x39, 0x49);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Description for consist.RapidEntity.ModelAttribute.Scale
		/// </summary>
		[DslDesign::DisplayNameResource("consist.RapidEntity.ModelAttribute/Scale.DisplayName", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("consist.RapidEntity.ModelAttribute/Scale.Description", typeof(global::consist.RapidEntity.RapidEntityDomainModel), "consist.RapidEntity.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f8f07f85-be86-40fa-bc49-3f8526e23949")]
		public global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.scalePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
